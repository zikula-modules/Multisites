{# purpose of this template: build the form to edit an instance of site #}
{% set baseTemplate = app.request.query.getBoolean('raw', false) ? 'raw' : (routeArea == 'admin' ? 'adminBase' : 'base') %}
{% extends 'ZikulaMultisitesModule::' ~ baseTemplate ~ '.html.twig' %}

{% block header %}
    {{ parent() }}
    {{ pageAddAsset('javascript', zasset('@ZikulaMultisitesModule:js/ZikulaMultisitesModule.Validation.js'), 98) }}
    {{ pageAddAsset('javascript', zasset('@ZikulaMultisitesModule:js/ZikulaMultisitesModule.EditFunctions.js'), 99) }}
{% endblock %}
{% block title mode == 'create' ? __('Create site') : __('Edit site') %}
{% block admin_page_icon mode == 'create' ? 'plus' : 'pencil-square-o' %}
{% block content %}
    <div class="zikulamultisitesmodule-site zikulamultisitesmodule-edit">
        {% if mode != 'create' %}
            <p class="alert alert-danger bold">{{ __('Caution: updating a site causes reapplying the template data again to it. All database tables except excluded ones will be dropped and recreated.') }}</p>
        {% endif %}
        {% form_theme form with [
            '@ZikulaMultisitesModule/Form/bootstrap_3.html.twig',
            'ZikulaFormExtensionBundle:Form:form_div_layout.html.twig'
        ] %}
        {{ form_start(form, {attr: {id: 'siteEditForm', class: 'zikulamultisites-edit-form'}}) }}
        {{ form_errors(form) }}
        {% set isNotCreation = mode != 'create' %}
        <fieldset>
            <legend>{{ __('Basic data') }}</legend>
            {{ form_row(form.name, {label: __('Name (internal)')}) }}
            {{ form_row(form.description, {label: __('Description (internal)')}) }}
            {{ form_row(form.siteAlias, {help: __('The alias must be a lower case, unique string containing only letters.'), disabled: isNotCreation}) }}
            {% if mode == 'create' %}
                {{ form_row(form.siteName) }}
            {% else %}
                {{ form_row(form.siteName, {label: __('Original site name'), disabled: true}) }}
            {% endif %}
            {{ form_row(form.siteDescription) }}
        </fieldset>
        <fieldset>
            <legend>{{ __('Site host or folder') }}</legend>
            {{ form_row(form.siteDns, {help: __('This is the domain or folder name under which this site should be reachable.'), disabled: isNotCreation}) }}
            {{ form_row(form.active) }}
        </fieldset>
        <fieldset>
            <legend>{{ __('Management information') }}</legend>
            {% if mode == 'create' %}
                {{ form_row(form.siteAdminName, {help: __('User names can contain letters, numbers, underscores, periods, or dashes.')}) }}
                {{ form_row(form.siteAdminPassword) }}
            {% else %}
                {{ form_row(form.siteAdminName, {label: __('Original site admin name'), disabled: true}) }}
                {{ form_row(form.siteAdminPassword, {label: __('Original site admin password'), disabled: true}) }}
            {% endif %}
            {{ form_row(form.siteAdminRealName) }}
            {% if mode == 'create' %}
                {{ form_row(form.siteAdminEmail) }}
            {% else %}
                {{ form_row(form.siteAdminEmail, {label: __('Original site admin email'), disabled: true}) }}
            {% endif %}
            {{ form_row(form.siteCompany) }}
        </fieldset>
        <fieldset>
            <legend>{{ __('Database data') }}</legend>
            {% if mode == 'create' %}
                <p class="alert alert-warning">{{ __('Caution: the database is emptied, so choose one which is not used by any other applications. All tables which are defined as excluded in the template are kept though.') }}</p>
            {% else %}
                <p class="alert alert-warning">{{ __('Change these values only if database credentials actually changed.') }}</p>
            {% endif %}
            {{ form_row(form.databaseType) }}
            {{ form_row(form.databaseHost) }}
            {{ form_row(form.databaseName) }}
            {{ form_row(form.databaseUserName) }}
            {{ form_row(form.databasePassword) }}
            {% if mode == 'create' %}
                <div class="form-group">
                    <div class="col-sm-offset-3 col-sm-9">
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" name="createNewDatabase" value="1" title="{{ __('Check this if the database does not exist yet.') }}" /> {{ __('Create database') }}
                            </label>
                        </div>
                        <span class="help-block z-sub">{{ __('Expert option! Only possible if the database user has sufficient permissions.') }}</span>
                        <span class="help-block z-sub">{{ __('Note: the database user must exist already for this to work.') }}</span>
                    </div>
                </div>
            {% endif %}
        </fieldset>
        <div{% if mode != 'create' %} class="hidden"{% endif %}>
            {{ include(
                '@ZikulaMultisitesModule/Project/includeSelectOne.html.twig',
                { group: 'site', heading: __('Template'), alias: 'template', mandatory: true, idPrefix: 'multisitesSite_Project', linkingItem: site, displayMode: 'choices' }
            ) }}
        </div>
        {% set templateMandatory = (mode == 'create' ? true : false) %}
        {{ include(
            '@ZikulaMultisitesModule/Template/includeSelectOne.html.twig',
            {group: 'site', heading: __('Project'), alias: 'project', mandatory: templateMandatory, idPrefix: 'multisitesSite_Template', linkingItem: site, displayMode: 'choices'}
        ) }}
        <fieldset>
            <legend>{{ __('Individualisation') }}</legend>
            {{ form_row(form.logo) }}
            {{ form_row(form.favIcon) }}
            <div class="hidden">
                {{ form_row(form.allowedLocales, {help: [__('Expert option! Per default all locales available in the system will be made available for the site.'), __('This feature has not been implemented yet (issue #17).')]}) }}
            </div>
            {{ form_row(form.parametersCsvFile, {help: __('Note: you should use semicolon as delimiter and UTF-8 as encoding.')}) }}
            {{ form_row(form.parametersArray, {help: ['<a id="deriveParametersFromTemplate" href="javascript:void(0);" class="hidden" style="clear:left;">' ~ __('Derive placeholders from template') ~ '</a>', __('Enter values for all parameters specified by the selected template separated by line breaks.')]}) }}
        </fieldset>

        {% if mode != 'create' %}
            {{ include('@ZikulaMultisitesModule/Helper/includeStandardFieldsEdit.html.twig', {obj: site}) }}
        {% endif %}

        {% if supportsHookSubscribers and formHookTemplates|length > 0 %}
            <fieldset>
                {% for hookTemplate in formHookTemplates %}
                    {{ include(hookTemplate.0, hookTemplate.1, ignore_missing = true) }}
                {% endfor %}
            </fieldset>
        {% endif %}
        
        {% if form.moderationSpecificCreator is defined or form.moderationSpecificCreationDate is defined %}
            <fieldset id="moderationFieldsSection">
                <legend>{{ __('Moderation') }} <i class="fa fa-expand"></i></legend>
                <div id="moderationFieldsContent">
                    {% if form.moderationSpecificCreator is defined %}
                        {{ form_row(form.moderationSpecificCreator) }}
                    {% endif %}
                    {% if form.moderationSpecificCreationDate is defined %}
                        {{ form_row(form.moderationSpecificCreationDate) }}
                    {% endif %}
                </div>
            </fieldset>
        {% endif %}

        {# include possible submit actions #}
        <div class="form-group form-buttons">
            <div class="col-sm-offset-3 col-sm-9">
                {% for action in actions %}
                    {{ form_widget(attribute(form, action.id)) }}
                    {% if mode == 'create' and action.id == 'submit' %}
                        {{ form_widget(attribute(form, 'submitrepeat')) }}
                    {% endif %}
                {% endfor %}
                {{ form_widget(form.reset) }}
                {{ form_widget(form.cancel) }}
            </div>
        </div>
        {{ form_end(form) }}
        {% if supportsHookSubscribers %}
            {% set hooks = notifyDisplayHooks(eventName='zikulamultisitesmodule.ui_hooks.sites.form_edit', id=site.getKey(), urlObject=currentUrlObject, outputAsArray=true) %}
            {% if hooks is iterable and hooks|length > 0 %}
                {% for area, hook in hooks %}
                    <div class="z-displayhook" data-area="{{ area|e('html_attr') }}">{{ hook|raw }}</div>
                {% endfor %}
            {% endif %}
        {% endif %}
        
    </div>
{% endblock %}
{% block footer %}
    {{ parent() }}
    {% set formInitScript %}
        <script type="text/javascript">
        /* <![CDATA[ */
            var zikulaMultisitesInlineEditHandlers = [];
            var zikulaMultisitesEditHandler = null;

            ( function($) {
                var parameterSpec = null;

                function filterTemplatesByProject()
                {
                    var oldTemplateId = $('#template').val();

                    $('#template option').remove();

                    {% if mode != 'create' %}
                        var opt = document.createElement('option');
                        opt.text = '{{ __('None (decouple site from template)') }}';
                        opt.value = '';
                        $('#template').options.add(opt);
                    {% endif %}

                    if (!$('#project').val()) {
                        return;
                    }

                    $.getJSON(Routing.generate('zikulamultisitesmodule_ajax_getprojecttemplates'), { id: $('#project').val() }, function(data) {
                        var templates = data.templates;
                        var includesOldId = false;

                        templates.each(function() {
                            var template = $(this);
                            var opt = document.createElement('option');
                            opt.text = template.name;
                            opt.value = template.id;
                            if (template.id == oldTemplateId) {
                                includesOldId = true;
                            }
                            {% if mode == 'create' or site.template is null %}
                                $('#template').options.add(opt);
                            {% else %}
                                if (template.id == oldTemplateId) {
                                    $('#template').options.add(opt);
                                }
                            {% endif %}

                            parameterSpec = template.parameters;
                        });

                        if (includesOldId === true) {
                            $('#template').value = oldTemplateId;
                        }
                    });
                }

                $(document).ready(function() {
                    // initialise auto completion for user fields
                    {% if form.moderationSpecificCreator is defined %}
                        initUserLiveSearch('zikulamultisitesmodule_site_moderationSpecificCreator');
                    {% endif %}
                    zikulaMultisitesInitEditForm('{{ mode }}', '{% if mode != 'create' %}{{ site.id }}{% endif %}');
                    zikulaMultisitesInitUploadField('zikulamultisitesmodule_site_logo_logo');
                    zikulaMultisitesInitUploadField('zikulamultisitesmodule_site_favIcon_favIcon');
                    zikulaMultisitesInitUploadField('zikulamultisitesmodule_site_parametersCsvFile_parametersCsvFile');

                    $('#deriveParametersFromTemplate').click(function(evt) {
                        evt.preventDefault();
                        if (null === parameterSpec) {
                            alert('{{ __('Parameter specification is not available yet.') }}');
                            return;
                        }
                        var spec = '';
                        parameterSpec.each(function() {
                            spec += $(this) + ': Your value' + "\n";
                        });
                        $('#parametersArray').val(spec);
                    }).removeClass('hidden');

                    $('#project').change(filterTemplatesByProject);
                    filterTemplatesByProject();
                });
            })(jQuery);
        /* ]]> */
        </script>
    {% endset %}
    {{ pageAddAsset('footer', formInitScript) }}
{% endblock %}
