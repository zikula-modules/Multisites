<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Multisites
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for site entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class Multisites_Entity_Base_Site extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to.
     */
    protected $_objectType = 'site';
    
    /**
     * @var Multisites_Entity_Validator_Site The validator for this entity.
     */
    protected $_validator = null;
    
    /**
     * @var boolean Option to bypass validation if needed.
     */
    protected $_bypassValidation = false;
    
    /**
     * @var array List of available item actions.
     */
    protected $_actions = array();
    
    /**
     * @var array The current workflow data of this object.
     */
    protected $__WORKFLOW__ = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * @ORM\Column(length=20)
     * @var string $workflowState.
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=150)
     * @var string $name.
     */
    protected $name = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $description.
     */
    protected $description = '';
    
    /**
     * @ORM\Column(length=20)
     * @var string $siteAlias.
     */
    protected $siteAlias = '';
    
    /**
     * @ORM\Column(length=150)
     * @var string $siteName.
     */
    protected $siteName = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $siteDescription.
     */
    protected $siteDescription = '';
    
    /**
     * @ORM\Column(length=25)
     * @var string $siteAdminName.
     */
    protected $siteAdminName = 'admin';
    
    /**
     * @ORM\Column(length=15)
     * @var string $siteAdminPassword.
     */
    protected $siteAdminPassword = '';
    
    /**
     * @ORM\Column(length=70)
     * @var string $siteAdminRealName.
     */
    protected $siteAdminRealName = '';
    
    /**
     * @ORM\Column(length=40)
     * @var string $siteAdminEmail.
     */
    protected $siteAdminEmail = '';
    
    /**
     * @ORM\Column(length=100)
     * @var string $siteCompany.
     */
    protected $siteCompany = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $siteDns.
     */
    protected $siteDns = '';
    
    /**
     * @ORM\Column(length=25)
     * @var string $databaseName.
     */
    protected $databaseName = '';
    
    /**
     * @ORM\Column(length=25)
     * @var string $databaseUserName.
     */
    protected $databaseUserName = '';
    
    /**
     * @ORM\Column(length=25)
     * @var string $databasePassword.
     */
    protected $databasePassword = '';
    
    /**
     * @ORM\Column(length=25)
     * @var string $databaseHost.
     */
    protected $databaseHost = 'localhost';
    
    /**
     * @ORM\Column(length=25)
     * @var string $databaseType.
     */
    protected $databaseType = '';
    
    /**
     * Logo meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $logoMeta.
     */
    protected $logoMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $logo.
     */
    protected $logo = '';
    
    /**
     * The full path to the logo.
     *
     * @var string $logoFullPath.
     */
    protected $logoFullPath = '';
    
    /**
     * Full logo path as url.
     *
     * @var string $logoFullPathUrl.
     */
    protected $logoFullPathUrl = '';
    /**
     * Fav icon meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $favIconMeta.
     */
    protected $favIconMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $favIcon.
     */
    protected $favIcon = '';
    
    /**
     * The full path to the fav icon.
     *
     * @var string $favIconFullPath.
     */
    protected $favIconFullPath = '';
    
    /**
     * Full fav icon path as url.
     *
     * @var string $favIconFullPathUrl.
     */
    protected $favIconFullPathUrl = '';
    /**
     * @ORM\Column(type="array")
     * @var array $allowedLocales.
     */
    protected $allowedLocales = array();
    
    /**
     * Parameters csv file meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $parametersCsvFileMeta.
     */
    protected $parametersCsvFileMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $parametersCsvFile.
     */
    protected $parametersCsvFile = '';
    
    /**
     * The full path to the parameters csv file.
     *
     * @var string $parametersCsvFileFullPath.
     */
    protected $parametersCsvFileFullPath = '';
    
    /**
     * Full parameters csv file path as url.
     *
     * @var string $parametersCsvFileFullPathUrl.
     */
    protected $parametersCsvFileFullPathUrl = '';
    /**
     * @ORM\Column(type="array")
     * @var array $parametersArray.
     */
    protected $parametersArray = array();
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $active.
     */
    protected $active = false;
    
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
    
    /**
     * Bidirectional - Many sites [sites] are linked by one template [template] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="Multisites_Entity_Template", inversedBy="sites")
     * @ORM\JoinTable(name="multisites_template")
     * @var Multisites_Entity_Template $template.
     */
    protected $template;
    
    /**
     * Bidirectional - Many sites [sites] are linked by one project [project] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="Multisites_Entity_Project", inversedBy="sites")
     * @ORM\JoinTable(name="multisites_project")
     * @var Multisites_Entity_Project $project.
     */
    protected $project;
    
    /**
     * Bidirectional - One site [site] has many extensions [site extensions] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="Multisites_Entity_SiteExtension", mappedBy="site", cascade={"remove"})
     * @ORM\JoinTable(name="multisites_siteextensions")
     * @ORM\OrderBy({"name" = "ASC"})
     * @var Multisites_Entity_SiteExtension[] $extensions.
     */
    protected $extensions = null;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->workflowState = 'initial';
        $this->initValidator();
        $this->initWorkflow();
        $this->extensions = new ArrayCollection();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _validator.
     *
     * @return Multisites_Entity_Validator_Site
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param Multisites_Entity_Validator_Site $_validator.
     *
     * @return void
     */
    public function set_validator(Multisites_Entity_Validator_Site $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Set _bypass validation.
     *
     * @param boolean $_bypassValidation.
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    /**
     * Get __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Set __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__.
     *
     * @return void
     */
    public function set__WORKFLOW__(array $__WORKFLOW__ = Array())
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    
    /**
     * Get workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Set workflow state.
     *
     * @param string $workflowState.
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = $workflowState;
    }
    
    /**
     * Get name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Set name.
     *
     * @param string $name.
     *
     * @return void
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    
    /**
     * Get description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Set description.
     *
     * @param string $description.
     *
     * @return void
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    
    /**
     * Get site alias.
     *
     * @return string
     */
    public function getSiteAlias()
    {
        return $this->siteAlias;
    }
    
    /**
     * Set site alias.
     *
     * @param string $siteAlias.
     *
     * @return void
     */
    public function setSiteAlias($siteAlias)
    {
        $this->siteAlias = $siteAlias;
    }
    
    /**
     * Get site name.
     *
     * @return string
     */
    public function getSiteName()
    {
        return $this->siteName;
    }
    
    /**
     * Set site name.
     *
     * @param string $siteName.
     *
     * @return void
     */
    public function setSiteName($siteName)
    {
        $this->siteName = $siteName;
    }
    
    /**
     * Get site description.
     *
     * @return string
     */
    public function getSiteDescription()
    {
        return $this->siteDescription;
    }
    
    /**
     * Set site description.
     *
     * @param string $siteDescription.
     *
     * @return void
     */
    public function setSiteDescription($siteDescription)
    {
        $this->siteDescription = $siteDescription;
    }
    
    /**
     * Get site admin name.
     *
     * @return string
     */
    public function getSiteAdminName()
    {
        return $this->siteAdminName;
    }
    
    /**
     * Set site admin name.
     *
     * @param string $siteAdminName.
     *
     * @return void
     */
    public function setSiteAdminName($siteAdminName)
    {
        $this->siteAdminName = $siteAdminName;
    }
    
    /**
     * Get site admin password.
     *
     * @return string
     */
    public function getSiteAdminPassword()
    {
        return $this->siteAdminPassword;
    }
    
    /**
     * Set site admin password.
     *
     * @param string $siteAdminPassword.
     *
     * @return void
     */
    public function setSiteAdminPassword($siteAdminPassword)
    {
        $this->siteAdminPassword = $siteAdminPassword;
    }
    
    /**
     * Get site admin real name.
     *
     * @return string
     */
    public function getSiteAdminRealName()
    {
        return $this->siteAdminRealName;
    }
    
    /**
     * Set site admin real name.
     *
     * @param string $siteAdminRealName.
     *
     * @return void
     */
    public function setSiteAdminRealName($siteAdminRealName)
    {
        $this->siteAdminRealName = $siteAdminRealName;
    }
    
    /**
     * Get site admin email.
     *
     * @return string
     */
    public function getSiteAdminEmail()
    {
        return $this->siteAdminEmail;
    }
    
    /**
     * Set site admin email.
     *
     * @param string $siteAdminEmail.
     *
     * @return void
     */
    public function setSiteAdminEmail($siteAdminEmail)
    {
        $this->siteAdminEmail = $siteAdminEmail;
    }
    
    /**
     * Get site company.
     *
     * @return string
     */
    public function getSiteCompany()
    {
        return $this->siteCompany;
    }
    
    /**
     * Set site company.
     *
     * @param string $siteCompany.
     *
     * @return void
     */
    public function setSiteCompany($siteCompany)
    {
        $this->siteCompany = $siteCompany;
    }
    
    /**
     * Get site dns.
     *
     * @return string
     */
    public function getSiteDns()
    {
        return $this->siteDns;
    }
    
    /**
     * Set site dns.
     *
     * @param string $siteDns.
     *
     * @return void
     */
    public function setSiteDns($siteDns)
    {
        $this->siteDns = $siteDns;
    }
    
    /**
     * Get database name.
     *
     * @return string
     */
    public function getDatabaseName()
    {
        return $this->databaseName;
    }
    
    /**
     * Set database name.
     *
     * @param string $databaseName.
     *
     * @return void
     */
    public function setDatabaseName($databaseName)
    {
        $this->databaseName = $databaseName;
    }
    
    /**
     * Get database user name.
     *
     * @return string
     */
    public function getDatabaseUserName()
    {
        return $this->databaseUserName;
    }
    
    /**
     * Set database user name.
     *
     * @param string $databaseUserName.
     *
     * @return void
     */
    public function setDatabaseUserName($databaseUserName)
    {
        $this->databaseUserName = $databaseUserName;
    }
    
    /**
     * Get database password.
     *
     * @return string
     */
    public function getDatabasePassword()
    {
        return $this->databasePassword;
    }
    
    /**
     * Set database password.
     *
     * @param string $databasePassword.
     *
     * @return void
     */
    public function setDatabasePassword($databasePassword)
    {
        $this->databasePassword = $databasePassword;
    }
    
    /**
     * Get database host.
     *
     * @return string
     */
    public function getDatabaseHost()
    {
        return $this->databaseHost;
    }
    
    /**
     * Set database host.
     *
     * @param string $databaseHost.
     *
     * @return void
     */
    public function setDatabaseHost($databaseHost)
    {
        $this->databaseHost = $databaseHost;
    }
    
    /**
     * Get database type.
     *
     * @return string
     */
    public function getDatabaseType()
    {
        return $this->databaseType;
    }
    
    /**
     * Set database type.
     *
     * @param string $databaseType.
     *
     * @return void
     */
    public function setDatabaseType($databaseType)
    {
        $this->databaseType = $databaseType;
    }
    
    /**
     * Get logo.
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->logo;
    }
    
    /**
     * Set logo.
     *
     * @param string $logo.
     *
     * @return void
     */
    public function setLogo($logo)
    {
        $this->logo = $logo;
    }
    
    /**
     * Get logo full path.
     *
     * @return string
     */
    public function getLogoFullPath()
    {
        return $this->logoFullPath;
    }
    
    /**
     * Set logo full path.
     *
     * @param string $logoFullPath.
     *
     * @return void
     */
    public function setLogoFullPath($logoFullPath)
    {
        $this->logoFullPath = $logoFullPath;
    }
    
    /**
     * Get logo full path url.
     *
     * @return string
     */
    public function getLogoFullPathUrl()
    {
        return $this->logoFullPathUrl;
    }
    
    /**
     * Set logo full path url.
     *
     * @param string $logoFullPathUrl.
     *
     * @return void
     */
    public function setLogoFullPathUrl($logoFullPathUrl)
    {
        $this->logoFullPathUrl = $logoFullPathUrl;
    }
    
    /**
     * Get logo meta.
     *
     * @return array
     */
    public function getLogoMeta()
    {
        return $this->logoMeta;
    }
    
    /**
     * Set logo meta.
     *
     * @param array $logoMeta.
     *
     * @return void
     */
    public function setLogoMeta($logoMeta = Array())
    {
        $this->logoMeta = $logoMeta;
    }
    
    /**
     * Get fav icon.
     *
     * @return string
     */
    public function getFavIcon()
    {
        return $this->favIcon;
    }
    
    /**
     * Set fav icon.
     *
     * @param string $favIcon.
     *
     * @return void
     */
    public function setFavIcon($favIcon)
    {
        $this->favIcon = $favIcon;
    }
    
    /**
     * Get fav icon full path.
     *
     * @return string
     */
    public function getFavIconFullPath()
    {
        return $this->favIconFullPath;
    }
    
    /**
     * Set fav icon full path.
     *
     * @param string $favIconFullPath.
     *
     * @return void
     */
    public function setFavIconFullPath($favIconFullPath)
    {
        $this->favIconFullPath = $favIconFullPath;
    }
    
    /**
     * Get fav icon full path url.
     *
     * @return string
     */
    public function getFavIconFullPathUrl()
    {
        return $this->favIconFullPathUrl;
    }
    
    /**
     * Set fav icon full path url.
     *
     * @param string $favIconFullPathUrl.
     *
     * @return void
     */
    public function setFavIconFullPathUrl($favIconFullPathUrl)
    {
        $this->favIconFullPathUrl = $favIconFullPathUrl;
    }
    
    /**
     * Get fav icon meta.
     *
     * @return array
     */
    public function getFavIconMeta()
    {
        return $this->favIconMeta;
    }
    
    /**
     * Set fav icon meta.
     *
     * @param array $favIconMeta.
     *
     * @return void
     */
    public function setFavIconMeta($favIconMeta = Array())
    {
        $this->favIconMeta = $favIconMeta;
    }
    
    /**
     * Get allowed locales.
     *
     * @return array
     */
    public function getAllowedLocales()
    {
        return $this->allowedLocales;
    }
    
    /**
     * Set allowed locales.
     *
     * @param array $allowedLocales.
     *
     * @return void
     */
    public function setAllowedLocales($allowedLocales)
    {
        $this->allowedLocales = $allowedLocales;
    }
    
    /**
     * Get parameters csv file.
     *
     * @return string
     */
    public function getParametersCsvFile()
    {
        return $this->parametersCsvFile;
    }
    
    /**
     * Set parameters csv file.
     *
     * @param string $parametersCsvFile.
     *
     * @return void
     */
    public function setParametersCsvFile($parametersCsvFile)
    {
        $this->parametersCsvFile = $parametersCsvFile;
    }
    
    /**
     * Get parameters csv file full path.
     *
     * @return string
     */
    public function getParametersCsvFileFullPath()
    {
        return $this->parametersCsvFileFullPath;
    }
    
    /**
     * Set parameters csv file full path.
     *
     * @param string $parametersCsvFileFullPath.
     *
     * @return void
     */
    public function setParametersCsvFileFullPath($parametersCsvFileFullPath)
    {
        $this->parametersCsvFileFullPath = $parametersCsvFileFullPath;
    }
    
    /**
     * Get parameters csv file full path url.
     *
     * @return string
     */
    public function getParametersCsvFileFullPathUrl()
    {
        return $this->parametersCsvFileFullPathUrl;
    }
    
    /**
     * Set parameters csv file full path url.
     *
     * @param string $parametersCsvFileFullPathUrl.
     *
     * @return void
     */
    public function setParametersCsvFileFullPathUrl($parametersCsvFileFullPathUrl)
    {
        $this->parametersCsvFileFullPathUrl = $parametersCsvFileFullPathUrl;
    }
    
    /**
     * Get parameters csv file meta.
     *
     * @return array
     */
    public function getParametersCsvFileMeta()
    {
        return $this->parametersCsvFileMeta;
    }
    
    /**
     * Set parameters csv file meta.
     *
     * @param array $parametersCsvFileMeta.
     *
     * @return void
     */
    public function setParametersCsvFileMeta($parametersCsvFileMeta = Array())
    {
        $this->parametersCsvFileMeta = $parametersCsvFileMeta;
    }
    
    /**
     * Get parameters array.
     *
     * @return array
     */
    public function getParametersArray()
    {
        return $this->parametersArray;
    }
    
    /**
     * Set parameters array.
     *
     * @param array $parametersArray.
     *
     * @return void
     */
    public function setParametersArray($parametersArray)
    {
        $this->parametersArray = $parametersArray;
    }
    
    /**
     * Get active.
     *
     * @return boolean
     */
    public function getActive()
    {
        return $this->active;
    }
    
    /**
     * Set active.
     *
     * @param boolean $active.
     *
     * @return void
     */
    public function setActive($active)
    {
        if ($active !== $this->active) {
            $this->active = (bool)$active;
        }
    }
    
    /**
     * Get created user id.
     *
     * @return integer
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    /**
     * Get template.
     *
     * @return Multisites_Entity_Template
     */
    public function getTemplate()
    {
        return $this->template;
    }
    
    /**
     * Set template.
     *
     * @param Multisites_Entity_Template $template.
     *
     * @return void
     */
    public function setTemplate(Multisites_Entity_Template $template = null)
    {
        $this->template = $template;
    }
    
    /**
     * Get project.
     *
     * @return Multisites_Entity_Project
     */
    public function getProject()
    {
        return $this->project;
    }
    
    /**
     * Set project.
     *
     * @param Multisites_Entity_Project $project.
     *
     * @return void
     */
    public function setProject(Multisites_Entity_Project $project = null)
    {
        $this->project = $project;
    }
    
    /**
     * Get extensions.
     *
     * @return Multisites_Entity_SiteExtension[]
     */
    public function getExtensions()
    {
        return $this->extensions;
    }
    
    /**
     * Set extensions.
     *
     * @param Multisites_Entity_SiteExtension[] $extensions.
     *
     * @return void
     */
    public function setExtensions($extensions)
    {
        foreach ($extensions as $siteExtensionSingle) {
            $this->addExtensions($siteExtensionSingle);
        }
    }
    
    /**
     * Adds an instance of Multisites_Entity_SiteExtension to the list of extensions.
     *
     * @param Multisites_Entity_SiteExtension $siteExtension The instance to be added to the collection.
     *
     * @return void
     */
    public function addExtensions(Multisites_Entity_SiteExtension $siteExtension)
    {
        $this->extensions->add($siteExtension);
        $siteExtension->setSite($this);
    }
    
    /**
     * Removes an instance of Multisites_Entity_SiteExtension from the list of extensions.
     *
     * @param Multisites_Entity_SiteExtension $siteExtension The instance to be removed from the collection.
     *
     * @return void
     */
    public function removeExtensions(Multisites_Entity_SiteExtension $siteExtension)
    {
        $this->extensions->removeElement($siteExtension);
        $siteExtension->setSite(null);
    }
    
    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see Multisites_Entity_Site::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $usesCsvOutput = FormUtil::getPassedValue('usecsvext', false, 'GETPOST', FILTER_VALIDATE_BOOLEAN);
        
        // initialise the upload handler
        $uploadManager = new Multisites_UploadHandler();
        $serviceManager = ServiceUtil::getManager();
        $controllerHelper = new Multisites_Util_Controller($serviceManager);
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this->formatTextualField('workflowState', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('name', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('description', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteAlias', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteName', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteDescription', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteAdminName', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteAdminPassword', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteAdminRealName', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteAdminEmail', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteCompany', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('siteDns', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('databaseName', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('databaseUserName', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('databasePassword', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('databaseHost', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('databaseType', $currentFunc, $usesCsvOutput);
        if (!empty($this['logo'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('site', 'logo');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath . $this['logo'];
            $this['logoFullPath'] = $fullPath;
            $this['logoFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['logoMeta']) || !is_array($this['logoMeta']) || !count($this['logoMeta'])) {
                // assign new meta data
                $this['logoMeta'] = $uploadManager->readMetaDataForFile($this['logo'], $fullPath);
            }*/
        }
        if (!empty($this['favIcon'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('site', 'favIcon');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath .  $this['favIcon'];
            $this['favIconFullPath'] = $fullPath;
            $this['favIconFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['favIconMeta']) || !is_array($this['favIconMeta']) || !count($this['favIconMeta'])) {
                // assign new meta data
                $this['favIconMeta'] = $uploadManager->readMetaDataForFile($this['favIcon'], $fullPath);
            }*/
        }
        $this['allowedLocales'] = ((isset($this['allowedLocales']) && is_array($this['allowedLocales'])) ? DataUtil::formatForDisplay($this['allowedLocales']) : array());
        if (!empty($this['parametersCsvFile'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('site', 'parametersCsvFile');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath .  $this['parametersCsvFile'];
            $this['parametersCsvFileFullPath'] = $fullPath;
            $this['parametersCsvFileFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['parametersCsvFileMeta']) || !is_array($this['parametersCsvFileMeta']) || !count($this['parametersCsvFileMeta'])) {
                // assign new meta data
                $this['parametersCsvFileMeta'] = $uploadManager->readMetaDataForFile($this['parametersCsvFile'], $fullPath);
            }*/
        }
        $this['parametersArray'] = ((isset($this['parametersArray']) && is_array($this['parametersArray'])) ? DataUtil::formatForDisplay($this['parametersArray']) : array());
        $this['active'] = (bool) $this['active'];
    
        $this->prepareItemActions();
    
        return true;
    }
    
    /**
     * Formats a given textual field depending on it's actual kind of content.
     *
     * @param string  $fieldName     Name of field to be formatted.
     * @param string  $currentFunc   Name of current controller action.
     * @param string  $usesCsvOutput Whether the output is CSV or not (defaults to false).
     * @param boolean $allowZero     Whether 0 values are allowed or not (defaults to false).
     */
    protected function formatTextualField($fieldName, $currentFunc, $usesCsvOutput = false, $allowZero = false)
    {
        if ($currentFunc == 'edit') {
            // apply no changes when editing the content
            return;
        }
    
        if ($usesCsvOutput == 1) {
            // apply no changes for CSV output
            return;
        }
    
        $string = '';
        if (isset($this[$fieldName])) {
            if (!empty($this[$fieldName]) || ($allowZero && $this[$fieldName] == 0)) {
                $string = $this[$fieldName];
                if ($this->containsHtml($string)) {
                    $string = DataUtil::formatForDisplayHTML($string);
                } else {
                    $string = DataUtil::formatForDisplay($string);
                    $string = nl2br($string);
                }
            }
        }
    
        $this[$fieldName] = $string;
    }
    
    /**
     * Checks whether any html tags are contained in the given string.
     * See http://stackoverflow.com/questions/10778035/how-to-check-if-string-contents-have-any-html-in-it for implementation details.
     *
     * @param $string string The given input string.
     *
     * @return boolean Whether any html tags are found or not.
     */
    protected function containsHtml($string)
    {
        return preg_match("/<[^<]+>/", $string, $m) != 0;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see Multisites_Entity_Site::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see Multisites_Entity_Site::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see Multisites_Entity_Site::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        $workflow = $this['__WORKFLOW__'];
        if ($workflow['id'] > 0) {
            $result = (bool) DBUtil::deleteObjectByID('workflows', $workflow['id']);
            if ($result === false) {
                $dom = ZLanguage::getModuleDomain('Multisites');
                return LogUtil::registerError(__('Error! Could not remove stored workflow. Deletion has been aborted.', $dom));
            }
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see Multisites_Entity_Site::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        $objectId = $this->createCompositeIdentifier();
    
        // initialise the upload handler
        $uploadManager = new Multisites_UploadHandler();
    
        $uploadFields = array('logo', 'favIcon', 'parametersCsvFile');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }
    
            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('site', $this, $uploadField, $objectId);
        }
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see Multisites_Entity_Site::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see Multisites_Entity_Site::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see Multisites_Entity_Site::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see Multisites_Entity_Site::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        return true;
    }
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     */
    public function getTitleFromDisplayPattern()
    {
        $serviceManager = ServiceUtil::getManager();
        $listHelper = new Multisites_Util_ListEntries(ServiceUtil::getManager());
    
        $formattedTitle = ''
                . $this->getName();
    
        return $formattedTitle;
    }
    
    /**
     * Initialises the validator and return it's instance.
     *
     * @return Multisites_Entity_Validator_Site The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new Multisites_Entity_Validator_Site($this);
    
        return $this->_validator;
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record.
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = new Multisites_Util_Workflow($serviceManager);
        
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'Multisites',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName);
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, array('main', 'view', 'display')) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'Multisites');
            if (!$result) {
                $dom = ZLanguage::getModuleDomain('Multisites');
                LogUtil::registerError(__('Error! Could not load the associated workflow.', $dom));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('initial');
    
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = new Multisites_Util_Workflow($serviceManager);
    
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'Multisites',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName);
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     *
     * @throws Zikula_Exception Thrown if a validation error occurs
     */
    public function validate()
    {
        if ($this->_bypassValidation === true) {
            return;
        }
    
        // decode possibly encoded mail addresses (#201)
        if (strpos($this['siteAdminEmail'], '&#') !== false) {
            $this['siteAdminEmail'] = html_entity_decode($this['siteAdminEmail']);
        }
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentLegacyControllerType = FormUtil::getPassedValue('lct', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('Multisites');
        if ($currentLegacyControllerType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                $component = 'Multisites:Site:';
                $instance = $this->id . '::';
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'site', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'site', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'site', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            
            // more actions for adding new related items
            $authAdmin = SecurityUtil::checkPermission($component, $instance, ACCESS_ADMIN);
            
            $uid = UserUtil::getVar('uid');
            if ($authAdmin || (isset($uid) && isset($this->createdUserId) && $this->createdUserId == $uid)) {
            
                $urlArgs = array('ot' => 'siteExtension',
                                 'site' => $this->id);
                if ($currentFunc == 'view') {
                    $urlArgs['returnTo'] = 'adminViewSite';
                } elseif ($currentFunc == 'display') {
                    $urlArgs['returnTo'] = 'adminDisplaySite';
                }
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => $urlArgs),
                    'icon' => 'add',
                    'linkTitle' => __('Create site extension', $dom),
                    'linkText' => __('Create site extension', $dom)
                );
            }
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return Array The resulting arguments list.
     */
    public function createUrlArgs()
    {
        $args = array('ot' => $this['_objectType']);
    
        $args['id'] = $this['id'];
    
        if (isset($this['slug'])) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers.
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'multisites.ui_hooks.sites';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: array()
     * 
     * @return array of entity objects.
     */
    public function getRelatedObjectsToPersist(&$objects = array()) 
    {
        return array();
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString()
    {
        return $this->getId();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     * (4) http://www.pantovic.com/article/26/doctrine2-entity-cloning
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // init validator
            $this->initValidator();
    
            // reset Workflow
            $this->resetWorkflow();
    
            // reset upload fields
            $this->setLogo('');
            $this->setLogoMeta(array());
            $this->setFavIcon('');
            $this->setFavIconMeta(array());
            $this->setParametersCsvFile('');
            $this->setParametersCsvFileMeta(array());
    
            $this->setCreatedDate(null);
            $this->setCreatedUserId(null);
            $this->setUpdatedDate(null);
            $this->setUpdatedUserId(null);
    
            
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
