<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Multisites
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Validator class for encapsulating entity validation methods.
 *
 * This is the base validation class for site entities.
 */
class Multisites_Entity_Validator_Base_Site extends Multisites_Validator
{
    /**
     * Performs all validation rules.
     *
     * @return mixed either array with error information or true on success
     */
    public function validateAll()
    {
        $errorInfo = array('message' => '', 'code' => 0, 'debugArray' => array());
        $dom = ZLanguage::getModuleDomain('Multisites');
        if (!$this->isStringNotEmpty('workflowState')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('workflow state'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('name', 150)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('name', 150), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('name')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('name'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('description', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('description', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteAlias', 20)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site alias', 20), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('siteAlias')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('site alias'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteName', 150)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site name', 150), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('siteName')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('site name'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteDescription', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site description', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteAdminName', 25)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site admin name', 25), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('siteAdminName')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('site admin name'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteAdminPassword', 15)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site admin password', 15), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('siteAdminPassword')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('site admin password'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteAdminRealName', 70)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site admin real name', 70), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteAdminEmail', 40)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site admin email', 40), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('siteAdminEmail')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('site admin email'), $dom);
            return $errorInfo;
        }
        if (!$this->isValidEmail('siteAdminEmail')) {
            $errorInfo['message'] = __f('Error! Field value must be a valid email address (%s).', array('site admin email'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteCompany', 100)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site company', 100), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('siteDns', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('site dns', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('siteDns')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('site dns'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('databaseName', 25)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('database name', 25), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('databaseName')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('database name'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('databaseUserName', 25)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('database user name', 25), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('databaseUserName')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('database user name'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('databasePassword', 50)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('database password', 50), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('databasePassword')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('database password'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('databaseHost', 25)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('database host', 25), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('databaseHost')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('database host'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('databaseType', 25)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('database type', 25), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('databaseType')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('database type'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('logo', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('logo', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('favIcon', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('fav icon', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('parametersCsvFile', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('parameters csv file', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isValidBoolean('active')) {
            $errorInfo['message'] = __f('Error! Field value must be a valid boolean (%s).', array('active'), $dom);
            return $errorInfo;
        }
    
        return true;
    }
    
    /**
     * Check for unique values.
     *
     * This method determines if there already exist sites with the same site.
     *
     * @param string $fieldName The name of the property to be checked
     * @return boolean result of this check, true if the given site does not already exist
     */
    public function isUniqueValue($fieldName)
    {
        if ($this->entity[$fieldName] === '') {
            return false;
        }
    
        $entityClass = 'Multisites_Entity_Site';
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository($entityClass);
    
        $excludeid = $this->entity['id'];
    
        return $repository->detectUniqueState($fieldName, $this->entity[$fieldName], $excludeid);
    }
    
    /**
     * Get entity.
     *
     * @return Zikula_EntityAccess
     */
    public function getEntity()
    {
        return $this->entity;
    }
    
    /**
     * Set entity.
     *
     * @param Zikula_EntityAccess $entity.
     *
     * @return void
     */
    public function setEntity(Zikula_EntityAccess $entity = null)
    {
        $this->entity = $entity;
    }
    
}
