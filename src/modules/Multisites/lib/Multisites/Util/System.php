<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Multisites
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Utility class for configuration related functionality.
 */
class Multisites_Util_System extends Zikula_AbstractBase
{
    private $dbConfigFile = 'config/multisites_dbconfig.php';

    /**
     * Creates initial folders for a new site.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    public function createSiteFolders(Multisites_Entity_Site $site)
    {
        $baseFolder = $this->serviceManager['multisites.files_real_path'];
        $siteDirectory = $baseFolder . '/' . $site['siteAlias'];
        $siteFiles = $siteDirectory . $this->serviceManager['multisites.site_files_folder'];
        $siteTemp = $siteDirectory . $this->serviceManager['multisites.site_temp_files_folder'];

        $directoryList = array(
            $baseFolder,
            $siteDirectory,
            $siteDirectory . $this->serviceManager['multisites.site_files_folder'],
            $siteTemp,
            $siteTemp . '/error_logs',
            $siteTemp . '/idsTmp',
            $siteTemp . '/purifierCache',
            $siteTemp . '/view_cache',
            $siteTemp . '/view_compiled',
            $siteTemp . '/Theme_cache',
            $siteTemp . '/Theme_compiled',
            $siteTemp . '/Theme_Config'
        );

        // add additional template folders to the list of directories
        if (!is_null($site['template']) && isset($site['template']['folders'])) {
            foreach ($site['template']['folders'] as $folder) {
                // check for empty value (just for BC)
                if ($folder == '') {
                    continue;
                }
                $directoryList[] = $siteFiles . '/' . trim($folder);
            }
        }

        // check and create the directories
        $result = true;
        foreach ($directoryList as $directory) {
            if (!file_exists($directory)) {
                @mkdir($directory, 0777, true);
                if (!file_exists($directory)) {
                    LogUtil::registerError($this->__f('Error! The <strong>%s</strong> directory does not exist and could not be created automatically. Please create it and make it writeable.', array($directory)));
                    $result = false;
                }
            }
            if (file_exists($directory) && !is_writeable($directory)) {
                @chmod($directory, 0777);
                if (!is_writeable($directory)) {
                    LogUtil::registerError($this->__f('Error! The <strong>%s</strong> directory is not writeable. Please correct that.', array($directory)));
                    $result = false;
                }
            }

            if ($result === false) {
                break;
            }
        }


        return $result;
    }

    /**
     * Creates a .htaccess file in the temp folder of a given site.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    public function createHtAccessForTempFolder(Multisites_Entity_Site $site)
    {
        // create a .htaccess file in the temp folder
        $tempAccessFileContent = $this->getVar('tempAccessFileContent', '');
        if ($tempAccessFileContent == '') {
            return true;
        }

        // create .htaccess file
        $siteDirectory = $this->serviceManager['multisites.files_real_path'] . '/' . $site['siteAlias'];
        $siteTemp = $siteDirectory . $this->serviceManager['multisites.site_temp_files_folder'];

        $file = $siteTemp . '/.htaccess';
        $result = file_put_contents($file, $tempAccessFileContent);

        return ($result !== false);
    }

    /**
     * Connects to an external database.
     *
     * @param string dbName The database name.
     * @param string dbUser The database user name.
     * @param string dbPass The database password.
     * @param string dbHost The database host name.
     * @param string dbType The database type.
     *
     * @return mixed Connection object or false on errors
     */
    public function connectToExternalDatabase($args)
    {
        /** can be removed probably

            if (!file_exists($this->dbConfigFile)) {
                return false;
            }

            include_once $dbConfigFile;

            // if it is received the parameter "site" it is assumed that the database connection values are in the $databaseArray array
        */

        $dbName = isset($args['dbname']) ? $args['dbname'] : null;
        $dbUser = isset($args['dbuname']) ? $args['dbuname'] : null;
        $dbPass = isset($args['dbpass']) ? $args['dbpass'] : null;
        $dbHost = isset($args['dbhost']) ? $args['dbhost'] : null;
        $dbType = isset($args['dbtype']) ? $args['dbtype'] : null;
        try {
            $connect = new PDO("$dbType:host=$dbHost;dbname=$dbName", $dbUser, $dbPass,
                array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8')
            );
        } catch (PDOException $e) {
            return LogUtil::registerError($e->getMessage());
        }

        return $connect;
    }

    /**
     * Creates a new database for a new site.
     *
     * @param string dbName The database name.
     * @param string dbUser The database user name.
     * @param string dbPass The database password.
     * @param string dbHost The database host name.
     * @param string dbType The database type.
     *
     * @return boolean True on success or false otherwise.
     */
    public function createDatabase($args)
    {
        $dbName = isset($args['dbname']) ? $args['dbname'] : null;
        $dbType = isset($args['dbtype']) ? $args['dbtype'] : null;

        if (empty($dbName) || empty($dbType)) {
            return false;
        }

        // check if database connection works
        $connect = $this->connectToExternalDatabase($args);
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($dbName)));
        }

        try {
            $sql = '';
            $sqlStart = 'CREATE DATABASE :dbName ';
            switch ($dbType) {
                case 'mysql':
                case 'mysqli':
                    $sql = $sqlStart . 'DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci';
                    break;
                case 'pgsql':
                    $sql = $sqlStart . 'ENCODING = \'utf8\'';
                    break;
                case 'oci':
                    $sql = $sqlStart . 'national character SET utf8';
                    break;
            }
            if (!empty($sql)) {
                $stmt = $connect->prepare($sql);
                if (!$stmt->execute(array(':dbName' => $dbName))) {
                    return LogUtil::registerError($this->__('DB Query error.') . ':<br />' . $sql  . "\n");;
                }
            }
        } catch (PDOException $e) {
            return LogUtil::registerError($this->__('Connection error, because:') . ' ' . $e->getMessage());
        }

        return true;
    }

    /**
     * Performs all steps required to setup a certain site in a given database.
     *
     * @param Multisites_Entity_Site site The currently treated site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    public function setupDatabaseContent(Multisites_Entity_Site $site)
    {
        // check if a template is present (could have been decoupled)
        if (!isset($site['template']) || !isset($site['template']['sqlFile']) || empty($site['template']['sqlFile'])) {
            // do nothing then
            return true;
        }

        // read out the existing tables
        $tables = $this->readTables($site);
        if (!is_array($tables)) {
            return false;
        }

        // delete old tables (except excluded ones)
        if (!$this->deleteTables($site, $tables['delete'])) {
            return LogUtil::registerError($this->__('Error! Deletion of old database tables failed.'));
        }

        // rename/backup excluded tables
        if (!$this->renameExcludedTables($site, $tables['rename'])) {
            return LogUtil::registerError($this->__('Error! Renaming of excluded database tables failed.'));
        }

        // recreate the database tables based on the template file
        if (!$this->createTablesFromTemplate($site)) {
            return LogUtil::registerError($this->__('Error! Creation of database tables failed.'));
        }

        // rename/restore excluded tables
        if (!$this->renameExcludedTables($site, $tables['rename'], true)) {
            return LogUtil::registerError($this->__('Error! Renaming of excluded database tables failed.'));
        }

        // update site parameters like admin name, admin password, cookie name, site name...
        if (!$this->updateConfigValues($site)) {
            return LogUtil::registerError($this->__('Error! Updating the site configuration failed.'));
        }

        // handle parameters as modvars
        if (!$this->processParameters($site)) {
            return LogUtil::registerError($this->__('Error! Updating the site parameters failed.'));
        }

        return true;
    }

    /**
     * Reads in all tables contained in a database..
     *
     * @param Multisites_Entity_Site site The currently treated site instance.
     *
     * @return array|boolean Array with table names or false on errors.
     */
    protected function readTables(Multisites_Entity_Site $site)
    {
        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $excludedTables = array();
        if (isset($site['template']) && isset($site['template']['excludedTables']) && is_array($site['template']['excludedTables'])) {
            $excludedTables = $site['template']['excludedTables'];
        }

        $droppedTables = array();
        $backupTables = array();

        try {
            $sql = 'SELECT `table_name` AS `tableName`
                    FROM `information_schema`.`tables`
                    WHERE `table_schema` = :dbName';
            $stmt = $connect->prepare($sql);
            if (!$stmt->execute(array(':dbName' => $site->getDatabaseName()))) {
                return LogUtil::registerError($this->__('DB Query error.') . ':<br />' . $sql  . "\n");;
            }

            $excludedTablesWithWildCards = array();
            $excludeAll = false;
            foreach ($excludedTables as $excludedTable) {
                if ($excludedTable == '*') {
                    $excludeAll = true;
                    break;
                }
                if (strpos($excludedTable, '*') === false) {
                    // no wildcard here
                    continue;
                }
                $excludedTablesWithWildCards[] = $excludedTable;
            }

            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $tableName = $row['tableName'];

                $excluded = false;
                if ($excludeAll === true) {
                    $excluded = true;
                } elseif (in_array($tableName, $excludedTables)) {
                    // table is excluded (e.g. content_content)
                    $excluded = true;
                } else {
                    // check if a wildcard affects $tableName
                    foreach ($excludedTablesWithWildCards as $excludedTable) {
                        $excludedTableParts = explode('*', $excludedTable);
                        $length = strlen($excludedTableParts[0]);
                        if (substr($tableName, 0, $length) === $excludedTableParts[0]) {
                            $excluded = true;
                            break;
                        }
                    }
                }

                if ($excluded === true) {
                    // rename
                    $backupTables[] = $tableName;
                } else {
                    // drop
                    $droppedTables[] = $tableName;
                }
            }
        } catch (PDOException $e) {
            return LogUtil::registerError($this->__('Connection error, because:') . ' ' . $e->getMessage());
        }

        return array('delete' => $droppedTables,
                     'rename' => $backupTables);
    }

    /**
     * Deletes a given list of tables contained in a database.
     *
     * @param Multisites_Entity_Site site   The currently treated site instance.
     * @param array                  tables List of table names.
     *
     * @return boolean True on success or false otherwise.
     */
    protected function deleteTables(Multisites_Entity_Site $site, array $tables)
    {
        if (count($tables) < 1) {
            return true;
        }

        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // drop tables
        $sql = 'DROP TABLE IF EXISTS `' . implode('`, `', $tables) . '`';
        $stmt = $connect->prepare($sql);
        try {
            $stmt->execute();
        } catch (PDOException $e) {
            return LogUtil::registerError($this->__('Connection error, because:') . ' ' . $e->getMessage());
        }

        return true;
    }

    /**
     * Renames a given list of tables contained in a database.
     *
     * @param Multisites_Entity_Site site    The currently treated site instance.
     * @param array                  tables  List of table names.
     * @param boolean                restore False for backup mode and true for recover mode.
     *
     * @return boolean True on success or false otherwise.
     */
    protected function renameExcludedTables(Multisites_Entity_Site $site, array $tables, $restore = false)
    {
        if (count($tables) < 1) {
            return true;
        }

        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $backupPrefix = 'zkms_backup_';
        $prefixFrom = '';
        $prefixTo = '';
        if (!$restore) {
            // backup
            $prefixTo = $backupPrefix;
        } else {
            // restore
            $prefixFrom = $backupPrefix;
        }

        try {
            // delete possible destination tables before
            $sql = '';
            foreach ($tables as $tableName) {
                if ($sql != '') {
                    $sql .= ', ';
                }
                $sql .= '`' . $prefixTo . $tableName . '`';
            }
            $sql = 'DROP TABLE IF EXISTS ' . $sql;
            $stmt = $connect->prepare($sql);
            $stmt->execute();

            // rename tables
            if ($site->getDatabaseType() == 'pgsql') {
                // postgres seems to need one command per table
                foreach ($tables as $tableName) {
                    $sql = 'ALTER TABLE `' . $prefixFrom . $tableName . '` RENAME TO `' . $prefixTo . $tableName . '`';
                    $stmt = $connect->prepare($sql);
                    $stmt->execute();
                }
            } else {
                // mysql and oracle can do it in one step
                $sql = '';
                foreach ($tables as $tableName) {
                    if ($sql != '') {
                        $sql .= ', ';
                    }
                    $sql .= '`' . $prefixFrom . $tableName . '` TO `' . $prefixTo . $tableName . '`';
                }
                $sql = 'RENAME TABLE ' . $sql;
                $stmt = $connect->prepare($sql);
                $stmt->execute();
            }
        } catch (PDOException $e) {
            return LogUtil::registerError($this->__('Connection error, because:') . ' ' . $e->getMessage());
        }

        return true;
    }

    /**
     * Creates database tables based on a given template file.
     *
     * @param Multisites_Entity_Site site The currently treated site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    protected function createTablesFromTemplate(Multisites_Entity_Site $site)
    {
        // check if the sql exists and it is readable
        $sqlFile = $site['template']['sqlFileFullPath'];
        if (!file_exists($sqlFile) || !is_readable($sqlFile)) {
            return LogUtil::registerError($this->__('Error! The template sql file could not be found.'));
        }

        // start reading the file
        $fh = fopen($sqlFile, 'r+');
        if ($fh == false) {
            return LogUtil::registerError($this->__('Error! Opening the template sql file failed.'));
        }

        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // read in the sql file's content
        $lines = file($sqlFile);
        $sql = '';
        $done = false;
        $errorInfo = '';
        foreach ($lines as $line_num => $line) {
            $line = trim($line);
            if (empty($line) || strpos($line, '--') === 0) {
                continue;
            }
            $sql .= $line;
            if (strrpos($line, ';') === strlen($line) - 1) {
                if (!$connect->query($sql)) {
                    $errorInfo = $this->__('Error importing the database in line') . ' ' . $line_num . ':<br />' . $sql . '<br />' . $connect->errorInfo() . "\n";
                    break;
                }

                $done = true;
                $sql = '';
            }
        }

        // close the file
        fclose($fh);

        if (!empty($errorInfo)) {
            return LogUtil::registerError($errorInfo);
        }

        if (!$done) {
            return LogUtil::registerError($this->__('Error! Importing the database failed. Perhaps there is a problem with the template file.'));
        }

        return true;
    }

    /**
     * Updates the module vars values for a newly created site.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    protected function updateConfigValues(Multisites_Entity_Site $site)
    {
        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // modify the site name
        $stmt = $connect->prepare('UPDATE `module_vars`
            SET `value` = :value
            WHERE `modname` = \'ZConfig\'
            AND `name` IN (\'sitename\', \'defaultpagetitle\')');
        if (!$stmt->execute(array(':value' => serialize($site->getSiteName())))) {
            return LogUtil::registerError($this->__('Error! Setting configurating value failed.') . ':<br />' . $sql  . "\n");
        }

        // modify the site description
        $stmt = $connect->prepare('UPDATE `module_vars`
            SET `value` = :value
            WHERE `modname` = \'ZConfig\'
            AND `name` IN (\'slogan\', \'defaultmetadescription\')');
        if (!$stmt->execute(array(':value' => serialize($site->getSiteDescription())))) {
            return LogUtil::registerError($this->__('Error! Setting configurating value failed.') . ':<br />' . $sql  . "\n");
        }

        // modify the adminmail
        $stmt = $connect->prepare('UPDATE `module_vars`
            SET `value` = :value
            WHERE `modname` = \'ZConfig\'
            AND `name` = \'adminmail\'');
        $adminEmail = $site->getSiteAdminEmail();
        // decode possibly encoded mail addresses (#201)
        if (strpos($adminEmail, '&#') !== false) {
            $adminEmail = html_entity_decode($adminEmail);
        }
        if (!$stmt->execute(array(':value' => serialize($adminEmail)))) {
            return LogUtil::registerError($this->__('Error! Setting configurating value failed.') . ':<br />' . $sql . "\n");
        }

        // modify the sessionCookieName
        $stmt = $connect->prepare('UPDATE `module_vars`
            SET `value` = :value
            WHERE `modname` = \'ZConfig\'
            AND `name` = \'sessionname\'');
        if (!$stmt->execute(array(':value' => serialize('ZKSID_' . strtoupper($site->getSiteAlias()))))) {
            return LogUtil::registerError($this->__('Error! Setting configurating value failed.') . ':<br />' . $sql . "\n");
        }

        // checks if the given administrator user exists
        $stmt = $connect->prepare('SELECT `uname`, `uid`
            FROM `users`
            WHERE `uname` = :uname');
        $stmt->execute(array(':uname' => $site->getSiteAdminName()));
        $rs = $stmt->fetch(PDO::FETCH_ASSOC);

        $password = UserUtil::getHashedPassword($site->getSiteAdminPassword());
        if ($rs['uname'] == '') {
            // insert new admin user
            $nowUTC = new DateTime(null, new DateTimeZone('UTC'));
            $nowUTCStr = $nowUTC->format('Y-m-d H:i:s');
            // create administrator
            $stmt = $connect->prepare('INSERT INTO users (uname, email, pass, approved_date, user_regdate, activated)
                VALUES (:uname, :email, :password, :approvedDate, :regDate, 1)');
            if (!$stmt->execute(array(':uname' => $site->getSiteAdminName(), ':email' => $site->getSiteAdminEmail(), ':password' => $password, ':approvedDate' => $nowUTCStr, ':regDate' => $nowUTCStr))) {
                return LogUtil::registerError($this->__('Error! Creating the site administrator failed.') . ':<br />' . $sql . "\n");
            }

            $stmt = $connect->prepare('SELECT `uid`
                FROM `users`
                WHERE `uname` = :uname');
            $stmt->execute(array(':uname' => $site->getSiteAdminName()));
            $rs = $stmt->fetch(PDO::FETCH_ASSOC);
        } else {
            // modify administrator password and email
            $stmt = $connect->prepare('UPDATE `users`
                SET `pass` = :password,
                    `email` = :email
                WHERE `uname` = :uname');
            if (!$stmt->execute(array(':password' => $password, ':email' => $site->getSiteAdminEmail(), ':uname' => $rs['uname']))) {
                return LogUtil::registerError($this->__('Error! Creating the site administrator failed.') . ':<br />' . $sql . "\n");
            }
        }
        $uid = $rs['uid'];

        // check if administrator is member of the admin group already
        $adminGroupId = 2;
        $stmt = $connect->prepare('SELECT `uid`
            FROM `group_membership`
            WHERE `uid` = :uid
            AND `gid` = :gid');
        $stmt->execute(array(':uid' => $uid, ':gid' => $adminGroupId));
        $rs = $stmt->fetch(PDO::FETCH_ASSOC);
        if ($rs['uid'] == '') {
            // add admin to the admin group
            $stmt = $connect->prepare('INSERT INTO `group_membership` (`uid`, `gid`)
                VALUES (:uid, :gid)');
            if (!$stmt->execute(array(':uid' => $uid, ':gid' => $adminGroupId))) {
                return LogUtil::registerError($this->__('Error! Creating the site administrator failed.') . ':<br />' . $sql . "\n");
            }
        }

        return true;
    }

    /**
     * Returns a list of parameter names and values for a certain site.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return array Built list of parameters.
     */
    protected function determineParameters(Multisites_Entity_Site $site)
    {
        $parameters = array();

        if (!is_array($site['template']['parameters']) || count($site['template']['parameters']) < 1) {
            return $parameters;
        }

        // init result array
        foreach ($site['template']['parameters'] as $parameterName) {
            $parameters[$parameterName] = '';
        }

        // read in csv values
        if ($site['parametersCsvFile'] !== null && $site['parametersCsvFile'] != '') {
            $row = 1;
            $csvFilePath = $site['parametersCsvFileFullPath'];
            if (file_exists($csvFilePath) && ($handle = fopen($csvFilePath, 'r')) !== FALSE) {
                $delimiter = ';';
                while (($paramParts = fgetcsv($handle, 1000, $delimiter)) !== FALSE) {
                    if (count($paramParts) != 2) {
                        continue;
                    }

                    if (!in_array($paramParts[0], array_keys($parameters))) {
                        continue;
                    }

                    $parameters[$paramParts[0]] = $paramParts[1];
                }
                fclose($handle);
            }
        }

        // read in manually entered values
        if (is_array($site['parametersArray']) && count($site['parametersArray']) > 0) {
            foreach ($site['parametersArray'] as $siteParam) {
                $paramParts = explode(': ', $siteParam);
                if (count($paramParts) != 2) {
                    continue;
                }

                if (!in_array($paramParts[0], array_keys($parameters))) {
                    continue;
                }

                $parameters[$paramParts[0]] = $paramParts[1];
            }
        }

        return $parameters;
    }

    /**
     * Inserts parameters and parameter values as module vars.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    protected function processParameters(Multisites_Entity_Site $site)
    {
        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $parameterPrefix = 'parameterValue';

        // delete obsolete parameter modvars which could exist due to another (earlier) template
        $sql = 'DELETE FROM `module_vars`
                WHERE `modname` = \'Multisites\'
                AND `name` LIKE \'' . $parameterPrefix . '%\'';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute()) {
            return LogUtil::registerError($this->__('Error! Deleting old parameters failed.'));
        }

        // insert new parameters
        $sql = 'INSERT INTO `module_vars` (`modname`, `name`, `value`)
                VALUES (\'Multisites\', :name, :value)';

        // determine new parameter names and values
        $parameters = $this->determineParameters($site);
        if (count($parameters) > 0) {
            foreach ($parameters as $parameterName => $parameterValue) {
                $stmt = $connect->prepare($sql);
                if (!$stmt->execute(array(':name' => $parameterPrefix . ucfirst($parameterName), ':value' => serialize($parameterValue)))) {
                    return LogUtil::registerError($this->__f('Error! Creating parameter "%s" failed.', array(ucfirst($parameterName))));
                }
            }
        }

        // add logo path as parameter
        $logo = ($site['logo'] !== null && $site['logo'] != '' && file_exists($site['logoFullPath'])) ? $site['logoFullPath'] : '';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute(array(':name' => $parameterPrefix . 'Logo', ':value' => serialize($logo)))) {
            return LogUtil::registerError($this->__f('Error! Creating parameter "%s" failed.', array('Logo')));
        }

        // add favicon path as parameter
        $favIcon = ($site['favIcon'] !== null && $site['favIcon'] != '' && file_exists($site['favIconFullPath'])) ? $site['favIconFullPath'] : '';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute(array(':name' => $parameterPrefix . 'FavIcon', ':value' => serialize($favIcon)))) {
            return LogUtil::registerError($this->__f('Error! Creating parameter "%s" failed.', array('FavIcon')));
        }

        return true;
    }

    /**
     * Updates the multisites_dbconfig.php configuration file.
     *
     * @return boolean True on success or false otherwise.
     */
    public function updateDatabaseConfigFile()
    {
        if (!file_exists($this->dbConfigFile)) {
            return false;
        }

        // get all active sites
        $where = 'tbl.active = 1';
        $sites = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'site', 'where' => $where, 'useJoins' => false));
        if ($sites === false) {
            return false;
        }

        $dbArray = array();
        foreach ($sites as $site) {
            $dbArray[$site->getSiteDns()] = $site->getDatabaseData();
        }

        // write file
        $dbconfig = var_export($dbArray, true);
        $phpCode = "<?php\n\$databaseArray = $dbconfig;";

        if (!file_put_contents($this->dbConfigFile, $phpCode)) {
            return false;
        }

        return true;
    }

    /**
     * Deletes a database.
     *
     * @param string dbName The database name.
     * @param string dbUser The database user name.
     * @param string dbPass The database password.
     * @param string dbHost The database host name.
     * @param string dbType The database type.
     *
     * @return Boolean True on success or false otherwise.
     */
    public function deleteDatabase($args)
    {
        // check if database connection works
        $connect = $this->connectToExternalDatabase($args);
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // now try to delete the database
        try {
            $stmt = $connect->prepare('DROP DATABASE :dbName;');
            try {
                $stmt->execute(array(':dbName' => $args['dbName']));
            } catch (PDOException $e) {
                return false;
            }
        } catch (PDOException $e) {
            return false;
        }

        return true;
    }

    /**
     * Deletes a directory recursively.
     *
     * @param string dirName Name of the directory to be deleted.
     *
     * @return Boolean True on success or false otherwise.
     */
    public function deleteDir($dirName)
    {
        if (!file_exists($dirName)) {
            return true;
        }

        $dir = dir($dirName);
        while ($file = $dir->read()) {
            if ($file != '.' && $file != '..') {
                if (is_dir($dirName . '/' . $file)) {
                    $this->deleteDir($dirName . '/' . $file);
                } else {
                    if (!@unlink($dirName . '/' . $file)) {
                        return LogUtil::registerError($this->__('Error deleting file:') . ' ' . $dirName . '/' . $file);
                    }
                }
            }
        }
        $dir->close();
        if (!@rmdir($dirName)) {
            return LogUtil::registerError($this->__('Error deleting file:') . ' ' . $dirName);
        }

        return true;
    }

    /**
     * Checks whether the operating system is Windows.
     *
     * @return boolean True if Windows is detected, false otherwise.
     */
    protected function isOnWindows() 
    {
        return (strcasecmp(substr(PHP_OS, 0, 3), 'WIN') == 0);
    }

    /**
     * Returns complete file path to the mysql program.
     *
     * @return string Path to the mysql program.
     */
    protected function getMySQLFilePath()
    {
        if ($this->isOnWindows()) {
            if (file_exists('/xampp/mysql/bin/mysql.exe')) return realpath('/xampp/mysql/bin/mysql.exe');   
            if (file_exists('/mysql/bin/mysql.exe')) return realpath('/mysql/bin/mysql.exe'); 
            if (file_exists('/Programme/mysql/bin/mysql.exe')) return realpath('/Programme/mysql/bin/mysql.exe'); 
            if (file_exists('/Programme/xampp/mysql/bin/mysql.exe')) return realpath('/Programme/xampp/mysql/bin/mysql.exe');   
            if (file_exists('/Program Files/mysql/bin/mysql.exe')) return realpath('/Program Files/mysql/bin/mysql.exe'); 
            if (file_exists('/Program Files/xampp/mysql/bin/mysql.exe')) return realpath('/Program Files/xampp/mysql/bin/mysql.exe');   
        } else {
            if (file_exists('/usr/bin/mysql')) return '/usr/bin/mysql'; 
            if (file_exists('/usr/sbin/mysql')) return '/usr/sbin/mysql'; 
            if (file_exists('/usr/etc/mysql')) return '/usr/etc/mysql'; 
            if (file_exists('/etc/mysql')) return '/etc/mysql'; 
            if (file_exists('/usr/ucblib/mysql')) return '/usr/ucblib/mysql'; 
            if (file_exists('/usr/lib/mysql')) return '/usr/lib/mysql'; 
        }

        return null;
    }

    /**
     * Creates a database dump into the given sql file.
     *
     * @param Multisites_Entity_Site site           The currently treated site instance.
     * @param string                 outputFilePath Path of output file.
     *
     * @return boolean True on success or false otherwise.
     */
    public function dumpDatabase(Multisites_Entity_Site $site, $outputFilePath)
    {
        ini_set('max_execution_time', 600);
        
        // find the "mysqldump" program
        $mysqlPath = $this->getMySQLFilePath(); // z.B. c:\Programme\xampp\mysql\bin\mysql.exe
        if (!$mysqlPath) {
            return LogUtil::registerError($this->__('Error! Could not find MySQL program directory.'));
        }
        $dumper = dirname($mysqlPath) . ($this->isOnWindows() ? '/mysqldump.exe' : '/mysqldump');
        if (!file_exists($dumper)) {
            return LogUtil::registerError($this->__('Error! The "mysqldump" program is not installed.'));
        }

        if (file_exists($outputFilePath)) {
            @unlink($outputFilePath);
        }

        $cmd = $dumper;
        $cmd .= ' --user=' . $site['databaseUserName'];
        $cmd .= ' --password="' . $site['databasePassword'] . '"';
        $cmd .= ' --host=' . $site['databaseHost'] . '';
        $cmd .= ' --quote-names --opt --compress --default-character-set=utf8';
        $cmd .= ' ' . $site['databaseName'];
        $cmd .= ' > ' . $outputFilePath;
        system($cmd, $retval);
        if ($retval != 0) {
            return LogUtil::registerError($this->__f('Error! The database dump failed. Please ensure that the database user %1%s has the "LOCK_TABLES" permission and the web service may write into the %2$s folder.', array($site['databaseUserName'], dirname($outputFilePath))));
        }

        return true;
    }

    /**
     * Creates a global administrator for a given site.
     *
     * @param Multisites_Entity_Site site The currently treated site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    public function createAdministrator(Multisites_Entity_Site $site)
    {
        // get global administrator parameters
        $globalAdminName = $this->getVar('globalAdminName');
        $globalAdminPassword = $this->getVar('globalAdminPassword');
        $globalAdminEmail = $this->getVar('globalAdminEmail');
        // check if the global administrator name, password and email had been defined
        if ($globalAdminName == '' || $globalAdminPassword == '' || $globalAdminEmail == '') {
            return LogUtil::registerError($this->__('You have not defined the global administrator name or password. Check the module configuration.'));
        }

        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // check if the super administrator exists
        $sql = 'SELECT `uid`
                FROM `users`
                WHERE `uname`= :globalAdminName';
        $stmt = $connect->prepare($sql);
        $stmt->execute(array(':globalAdminName' => $globalAdminName));
        $rs = $stmt->fetch(PDO::FETCH_ASSOC);
        $uid = $rs['uid'];

        // encrypt the password with the hash method
        $password = UserUtil::getHashedPassword($globalAdminPassword);

        if ($uid == '') {
            // the user doesn't exist, thus we create it
            $nowUTC = new DateTime(null, new DateTimeZone('UTC'));
            $nowUTCStr = $nowUTC->format('Y-m-d H:i:s');
            $stmt = $connect->prepare('INSERT INTO users (uname, email, pass, approved_date, user_regdate, activated)
                VALUES (:uname, :email, :password, :approvedDate, :regDate, 1)');
            if (!$stmt->execute(array(':uname' => $globalAdminName, ':email' => $globalAdminEmail, ':password' => $password, ':approvedDate' => $nowUTCStr, ':regDate' => $nowUTCStr))) {
                return LogUtil::registerError($this->__('Error! Creating global administrator failed.'));
            }

            $sql = 'SELECT `uid`
                    FROM `users`
                    WHERE `uname`= :globalAdminName';
            $stmt = $connect->prepare($sql);
            $stmt->execute(array(':globalAdminName' => $globalAdminName));
            $rs = $stmt->fetch(PDO::FETCH_ASSOC);
            if (!$rs) {
                return LogUtil::registerError($this->__('Error! Getting global administrator values failed.'));
            }
            $uid = $rs['uid'];

            if ($uid != '') {
                // insert the user into the administrators group
                $stmt = $connect->prepare('INSERT INTO group_membership (uid, gid) VALUES (:uid, 2)');
                if (!$stmt->execute(array(':uid' => $uid))) {
                    return LogUtil::registerError($this->__('Error! Adding global administrator to admin group failed.'));
                }
            }
        } else {
            // check if the user is administrator
            $adminGroupId = 2;
            $sql = 'SELECT `gid`
                    FROM `group_membership`
                    WHERE `uid` = :uid
                    AND gid = :gid';
            $stmt = $connect->prepare($sql);
            $stmt->execute(array(':uid' => $uid, ':gid' => $adminGroupId));
            $rs = $stmt->fetch(PDO::FETCH_ASSOC);
            if (!$rs) {
                return LogUtil::registerError($this->__('Error! Getting global administrator group failed.'));
            }
            $gid = $rs['gid'];

            if ($gid == '') {
                // the user is not administrator, hence we insert the user into the administrators group
                $stmt = $connect->prepare('INSERT INTO `group_membership` (`uid`, `gid`) VALUES (:uid, :gid)');
                if (!$stmt->execute(array(':uid' => $uid, ':gid' => $adminGroupId))) {
                    return LogUtil::registerError($this->__('Error! Adding global administrator to admin group failed.'));
                }
            }

            // update global administrator password
            $sql = 'UPDATE `users`
                    SET `pass` = :password
                    WHERE `uid` = :uid';
            $stmt = $connect->prepare($sql);
            if (!$stmt->execute(array(':uid' => $uid, ':password' => $password))) {
               return LogUtil::registerError($this->__('Error! Updating global administrator password failed.'));
            }
        }

        return true;
    }

    /**
     * Recover the first row in the permissions table for administrators.
     *
     * @param Multisites_Entity_Site site The currently treated site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    public function recoverAdminSiteControl(Multisites_Entity_Site $site)
    {
        // check if database connection works
        $connect = $this->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // delete the sequence in the first position
        $sql = 'DELETE FROM `group_perms`
                WHERE `sequence` < 1
                OR `pid` = 1';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute()) {
            return LogUtil::registerError($this->__('Error! Deleting the permission sequences having a value below 0 failed.'));
        }

        // insert a new sequence
        $sql = 'INSERT INTO `group_perms` (`gid`, `sequence`, `component`, `instance`, `level`, `pid`)
                VALUES (2, 0, \'.*\', \'.*\', 800, 1)';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute()) {
            return LogUtil::registerError($this->__('Error! Creating the new permission sequence failed.'));
        }

        return true;
    }
}
