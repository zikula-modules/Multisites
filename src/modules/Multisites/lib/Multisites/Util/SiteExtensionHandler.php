<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Multisites
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Utility class for collecting and persisting site extensions (modules, themes, system plugins, module plugins).
 */
class Multisites_Util_SiteExtensionHandler extends Zikula_AbstractBase
{
    /**
     * Renders the icons that identify the modules availability for a site.
     *
     * @param Zikula_View            view The current view instance.
     * @param Multisites_Entity_Site site The given site instance.
     * @param array                  args Additional arguments.
     *
     * @return string The rendered output.
     */
    public function getActionIconsForSiteModule(Zikula_View $view, Multisites_Entity_Site $site, $args)
    {
        $name = isset($args['name']) ? $args['name'] : $this->request->request->get('name', null);
        $available = isset($args['available']) ? $args['available'] : $this->request->request->get('available', null);
        $siteModules = isset($args['siteModules']) ? $args['siteModules'] : $this->request->request->get('siteModules', null);

        $theView = !is_null($view) ? $view : Zikula_View::getInstance($this->name);
        $theView->setCaching(Zikula_View::CACHE_DISABLED);

        $theView->assign('site', $site)
                ->assign('name', $name)
                ->assign('available', $available)
                ->assign('siteModules', $siteModules);

        return $theView->fetch('site/iconsModule.tpl');
    }

    /**
     * Renders the icons that identify the themes availability for a site.
     *
     * @param Zikula_View            view The current view instance.
     * @param Multisites_Entity_Site site The given site instance.
     * @param array                  args Additional arguments.
     *
     * @return string The rendered output.
     */
    public function getActionIconsForSiteTheme(Zikula_View $view, Multisites_Entity_Site $site, $args)
    {
        $name = isset($args['name']) ? $args['name'] : $this->request->request->get('name', null);
        $available = isset($args['available']) ? $args['available'] : $this->request->request->get('available', null);
        $siteThemes = isset($args['siteThemes']) ? $args['siteThemes'] : $this->request->request->get('siteThemes', null);
        $isDefaultTheme = isset($args['isDefaultTheme']) ? $args['isDefaultTheme'] : $this->request->request->get('isDefaultTheme', null);

        $theView = !is_null($view) ? $view : Zikula_View::getInstance($this->name);
        $theView->setCaching(Zikula_View::CACHE_DISABLED);

        $theView->assign('site', $site)
                ->assign('name', $name)
                ->assign('available', $available)
                ->assign('isDefaultTheme', $isDefaultTheme)
                ->assign('siteThemes', $siteThemes);

        return $theView->fetch('site/iconsTheme.tpl');
    }

    /**
     * Retrieves all modules available for a given site.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return array|boolean An array with a list of the found modules or false on errors.
     */
    public function getAllModulesFromSiteDb(Multisites_Entity_Site $site)
    {
        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $items = array();
        $stmt = $connect->prepare('SELECT `name`, `state`, `version` FROM `modules`');
        $stmt->execute();

        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $items[$row['name']] = $row;
        }

        return $items;
    }

    /**
     * Saves the modules and versions of a site into the Multisites database.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return boolean True on success or false otherwise.
     */
    public function saveSiteModulesIntoOwnDb(Multisites_Entity_Site $site)
    {
        // get all the modules available in site
        $siteModules = $this->getAllModulesFromSiteDb($site);

        $workflowHelper = new Multisites_Util_Workflow($this->serviceManager);

        // save them
        foreach ($siteModules as $module) {
            $entity = new Multisites_Entity_SiteExtension();
            $entity->setName($module['name']);
            $entity->setExtensionVersion($module['version']);
            $entity->setExtensionType('module');
            $this->entityManager->persist($entity);
            $site->addExtensions($entity);
            $success = $workflowHelper->executeAction($entity, 'submit');
        }

        //$success = $workflowHelper->executeAction($site, 'update');

        return true;
    }

    /**
     * Returns information for a given site module.
     *
     * @param Multisites_Entity_Site site       The given site instance.
     * @param string                 moduleName Name of module to select.
     *
     * @return array|boolean An array with the required module information or false on errors.
     */
    public function getModuleFromSiteDb(Multisites_Entity_Site $site, $moduleName)
    {
        if ($moduleName == null || $moduleName == '') {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $sql = 'SELECT `name`, `state` FROM `modules`
                WHERE `name` = :moduleName';
        $stmt = $connect->prepare($sql);
        $stmt->execute(array(':moduleName' => $moduleName));

        $rs = $stmt->fetch();
        if (!$rs) {
            return false;
        }

        $item = array('name' => $rs['name'],
                      'state' => $rs['state']);

        return $item;
    }

    /**
     * Creates a module in a site database.
     *
     * @param Multisites_Entity_Site site       The given site instance.
     * @param string                 moduleName Name of module to create.
     *
     * @return boolean True on success or false otherwise.
     */
    public function createSiteModule(Multisites_Entity_Site $site, $moduleName)
    {
        if ($moduleName == null || $moduleName == '') {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $allModules = ModUtil::apiFunc('Extensions', 'admin', 'getfilemodules');
        $module = $allModules[$moduleName];

        $fields = '';
        $values = '';

        $textual = array('name',
                         'displayname',
                         'url',
                         'description',
                         'directory',
                         'version',
                         'capabilities',
                         'securityschema',
                         'core_min',
                         'core_max');

        $exclude = array('oldnames',
                         'dependencies');

        foreach ($module as $key => $value) {
            if (!in_array($key, $exclude)) {
                $fields .= $key . ',';
                $apos = in_array($key, $textual) ? "'" : '';
                $valueString = ($value == '') ? "''" : $apos . DataUtil::formatForStore($value) . $apos;
                $values .= $valueString . ',';
            }
        }
        $fields = substr($fields, 0, -1);
        $values = substr($values, 0, -1);
        // set module state to 1
        $fields .= ', state';
        $values .= ', 1';

        //create the module in the site
        $sql = "INSERT INTO modules ($fields)
                VALUES ($values)";
        $rs = $connect->query($sql);
        if (!$rs) {
            return LogUtil::registerError($this->__('Error! Creation attempt failed.' . $sql));
        }

        return true;
    }

    /**
     * Deletes a module from a site database.
     *
     * @param Multisites_Entity_Site site       The given site instance.
     * @param string                 moduleName Name of module to delete.
     *
     * @return boolean True on success or false otherwise.
     */
    public function deleteSiteModule(Multisites_Entity_Site $site, $moduleName)
    {
        if ($moduleName == null || $moduleName == '') {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // get module information
        $siteModule = $this->getModuleFromSiteDb($site, $moduleName);

        if ($siteModule['state'] == ModUtil::STATE_ACTIVE) {
            $this->modifyModuleActivation($site, array(
                'moduleName' => $moduleName,
                'newState' => ModUtil::STATE_INACTIVE));
            return true;
        }

        if ($siteModule['state'] == ModUtil::STATE_INACTIVE) {
            return true;
        }

        $sql = 'DELETE FROM `modules`
                WHERE `name` = :moduleName';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute(array(':moduleName' => $moduleName))) {
            return LogUtil::registerError($this->__('Error! Sorry! Deletion attempt failed.'));
        }

        return true;
    }

    /**
     * Modifies the state of a module in a site database.
     *
     * @param Multisites_Entity_Site site The given site instance.
     * @param array                  args Additional arguments.
     *
     * @return boolean True on success or false otherwise.
     */
    public function modifyModuleActivation(Multisites_Entity_Site $site, $args)
    {
        $moduleName = $args['moduleName'];
        $newState = $args['newState'];

        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        // update the module state
        $sql = 'UPDATE `modules`
                SET `state` = :newState
                WHERE `name` = :moduleName';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute(array(':moduleName' => $moduleName, ':newState' => $newState))) {
            return LogUtil::registerError($this->__('Error! Update attempt failed.'));
        }

        return true;
    }

    /**
     * Retrieves all themes available in the themes directory.
     *
     * @return An array with all existing theme names.
     */
    public function getAllThemesInSystem()
    {
        $themeBaseFolder = 'themes';
        $themes = array();
        if (!file_exists($themeBaseFolder) || !is_dir($themeBaseFolder)) {
            return $themes;
        }

        $dh = opendir($themeBaseFolder);
        $dirArray = array();
        while ($dir = readdir($dh)) {
            if (in_array($dir, array('.', '..', '.git', '.svn', 'CVS', 'index.html', 'index.htm', '.htaccess'))) {
                continue;
            }
            if (!is_dir($themeBaseFolder . '/' . $dir)) {
                continue;
            }
            $dirArray[] = $dir;
        }
        closedir($dh);

        foreach ($dirArray as $dir) {
            $themeFolder = $themeBaseFolder . '/' . $dir . '/';
            $themeType = 0;
            $themeversion = array();

            // Work out the theme type
            if (file_exists($themeFolder . 'theme.cfg') && file_exists($themeFolder . 'theme.php')) {
                $themeType = 4;
            } elseif (file_exists($themeFolder . 'version.php') && !file_exists($themeFolder . 'theme.php')) {
                $themeType = 3;
            } elseif (file_exists($themeFolder . 'xaninit.php') && file_exists($themeFolder . 'theme.php')) {
                // xanthia 2.0 themes will need upgrading so set the theme state to inactive
                $themeversion['state'] = ThemeUtil::STATE_INACTIVE;
                $themeType = 2;
            } elseif (file_exists($themeFolder . 'theme.php')) {
                $themeType = 1;
            } else {
                // anything else isn't a theme
                continue;
            }

            // Set some defaults in case we don't have a theme version file
            $themeversion['name'] = preg_replace('/_/', ' ', $dir);
            $themeversion['displayname'] = preg_replace('/_/', ' ', $dir);
            $themeversion['version'] = '0';
            $themeversion['description'] = '';
            // include the correct version file based on theme type and
            // manipulate the theme version information
            if (file_exists($file = $themeFolder . 'version.php')) {
                if (!include($file)) {
                    LogUtil::registerError($this->__f('Error! Could not include %s', $file));
                }
            } elseif ($themeType == 4 && file_exists($file = $themeFolder . 'theme.cfg')) {
                if (!include($file)) {
                    LogUtil::registerError($this->__f('Error! Could not include %s', $file));
                }
                if (!isset($themeversion['name'])) {
                    $themeversion['name'] = $dir;
                }
                $themeversion['displayname'] = $themeversion['name'];
            } elseif ($themeType == 2 && file_exists($file = $themeFolder . 'xaninfo.php')) {
                if (!include($file)) {
                    LogUtil::registerError($this->__f('Error! Could not include %s', $file));
                }
                $themeversion['author'] = $themeinfo['author'];
                $themeversion['contact'] = $themeinfo['download'];
                $themeversion['name'] = $themeinfo['name'];
                $themeversion['displayname'] = $themeinfo['name'];
                $themeversion['xhtml'] = $themeinfo['xhtmlsupport'];
            }
            $themes[$themeversion['name']] = array(
                'directory'     => $dir,
                'name'          => $themeversion['name'],
                'type'          => $themeType,
                'displayname'   => (isset($themeversion['displayname']) ? $themeversion['displayname'] : $themeversion['name']),
                'version'       => (isset($themeversion['version']) ? $themeversion['version'] : '1.0'),
                'description'   => (isset($themeversion['description']) ? $themeversion['description'] : $themeversion['displayname']),
                'admin'         => (isset($themeversion['admin']) ? (int) $themeversion['admin'] : '0'),
                'user'          => (isset($themeversion['user']) ? (int) $themeversion['user'] : '1'),
                'system'        => (isset($themeversion['system']) ? (int) $themeversion['system'] : '0'),
                'state'         => (isset($themeversion['state']) ? $themeversion['state'] : ThemeUtil::STATE_ACTIVE),
                'official'      => (isset($themeversion['offical']) ? (int) $themeversion['offical'] : '0'),
                'author'        => (isset($themeversion['author']) ? $themeversion['author'] : ''),
                'contact'       => (isset($themeversion['contact']) ? $themeversion['contact'] : ''),
                'credits'       => (isset($themeversion['credits']) ? $themeversion['credits'] : ''),
                'help'          => (isset($themeversion['help']) ? $themeversion['help'] : ''),
                'changelog'     => (isset($themeversion['changelog']) ? $themeversion['changelog'] : ''),
                'license'       => (isset($themeversion['license']) ? $themeversion['license'] : ''),
                'xhtml'         => (isset($themeversion['xhtml']) ? (int) $themeversion['xhtml'] : 1)
            );

            // reset vars for next iteration
            unset($themeversion);
            unset($themeType);
        }

        ksort($themes);

        return $themes;
    }

    /**
     * Retrieves all themes available for a given site.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return array|boolean An array with a list of the found themes or false on errors.
     */
    public function getAllThemesFromSiteDb(Multisites_Entity_Site $site)
    {
        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $items = array();
        $stmt = $connect->prepare('SELECT `name`, `state` FROM `themes`');
        $stmt->execute();

        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $items[$row['name']] = $row;
        }

        return $items;
    }

    /**
     * Returns information for a given site theme.
     *
     * @param Multisites_Entity_Site site      The given site instance.
     * @param string                 themeName Name of theme to select.
     *
     * @return array|boolean An array with the required theme information or false on errors.
     */
    public function getThemeFromSiteDb(Multisites_Entity_Site $site, $themeName)
    {
        if ($themeName == null || $themeName == '') {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $sql = 'SELECT `name`, `state`
                FROM `themes`
                WHERE `name` = :themeName';
        $stmt = $connect->prepare($sql);
        $stmt->execute(array(':themeName' => $themeName));

        $rs = $stmt->fetch();
        if (!$rs) {
            //return LogUtil::registerError($this->__('Error! Could not load items.'));
        }
        $item = array('name' => $rs['name'],
                      'state' => $rs['state']);

        return $item;
    }

    /**
     * Creates a theme in a site database.
     *
     * @param Multisites_Entity_Site site      The given site instance.
     * @param string                 themeName Name of theme to create.
     *
     * @return boolean True on success or false otherwise.
     */
    public function createSiteTheme(Multisites_Entity_Site $site, $themeName)
    {
        if ($themeName == null || $themeName == '') {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $allThemes = $this->getAllThemesInSystem();
        $theme = $allThemes[$themeName];

        $fields = '';
        $values = '';

        $textual = array('name',
                         'displayname',
                         'description',
                         'directory',
                         'version',
                         'contact');

        $exclude = array('official',
                         'author',
                         'credits',
                         'help',
                         'changelog',
                         'license');

        foreach ($theme as $key => $value) {
            if (!in_array($key, $exclude)) {
                $fields .= $key . ',';
                $apos = (in_array($key, $textual)) ? "'" : '';
                $valueString = ($value == '') ? "''" : $apos . DataUtil::formatForStore($value) . $apos;
                $values .= $valueString . ',';
            }
        }

        $fields = substr($fields, 0, -1);
        $values = substr($values, 0, -1);

        //create the theme in the site
        $sql = "INSERT INTO themes ($fields)
                VALUES ($values)";
        $rs = $connect->query($sql);
        if (!$rs) {
            return LogUtil::registerError($this->__('Error! Creation attempt failed.' . $sql));
        }

        return true;
    }

    /**
     * Deletes a theme from a site database.
     *
     * @param Multisites_Entity_Site site      The given site instance.
     * @param string                 themeName Name of theme to delete.
     *
     * @return boolean True on success or false otherwise.
     */
    public function deleteSiteTheme(Multisites_Entity_Site $site, $themeName)
    {
        if ($themeName == null || $themeName == '') {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $sql = 'DELETE FROM `themes`
                WHERE `name` = :themeName';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute(array(':themeName' => $themeName))) {
            return LogUtil::registerError($this->__('Error! Sorry! Deletion attempt failed.'));
        }

        return true;
    }

    /**
     * Gets the default theme for a site.
     *
     * @param Multisites_Entity_Site site The given site instance.
     *
     * @return string Name of site default theme.
     */
    public function getSiteDefaultTheme(Multisites_Entity_Site $site)
    {
        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $sql = 'SELECT `value`
                FROM `module_vars`
                WHERE `modname` = \'ZConfig\'
                AND `name` = \'Default_Theme\'';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute()) {
            return LogUtil::registerError($this->__('Error! Could not load default theme.'));
        }
        $rs = $stmt->fetch();
        $defaultTheme = $rs['value'];

        return $defaultTheme;
    }

    /**
     * Update the site default theme
     *
     * @param Multisites_Entity_Site site      The given site instance.
     * @param string                 themeName Name of new default theme.
     *
     * @return boolean True on success or false otherwise.
     */
    public function setAsDefaultTheme(Multisites_Entity_Site $site, $themeName)
    {
        $systemHelper = new Multisites_Util_System($this->serviceManager);

        $connect = $systemHelper->connectToExternalDatabase($site->getDatabaseData());
        if (!$connect) {
            return LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($site->getDatabaseName())));
        }

        $value = serialize($themeName);
        $sql = 'UPDATE `module_vars`
                SET `value` = :value
                WHERE `modname` = \'ZConfig\'
                AND `name` = \'Default_Theme\'';
        $stmt = $connect->prepare($sql);
        if (!$stmt->execute(array(':value' => $value))) {
            return LogUtil::registerError($this->__('Error! Could not save the new default theme.'));
        }

        return true;
    }
}
