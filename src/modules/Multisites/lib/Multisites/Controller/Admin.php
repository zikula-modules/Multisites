<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Multisites
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Admin controller class providing navigation and interaction functionality.
 */
class Multisites_Controller_Admin extends Multisites_Controller_Base_Admin
{
    /**
     * This method is the default function handling the main area called without defining arguments.
     *
     * @return mixed Output.
     */
    public function main()
    {
        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // check if configuration is required
        $configRequired = !$this->isConfigured();

        $redirectUrl = null;
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');
        } else {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'view', array('ot' => 'site'));
        }

        return $this->redirect($redirectUrl);
    }

    /**
     * Check whether Multisites is running or not.
     *
     * @return boolean True if Multisites properties are available.
     */
    protected function isConfigured()
    {
        global $ZConfig;

        if (!isset($ZConfig['Multisites'])) {
            return false;
        }
        $msConfig = $ZConfig['Multisites'];

        return (isset($msConfig['multisites.enabled']) && $msConfig['multisites.enabled'] == 1
             && isset($msConfig['multisites.mainsiteurl'])
             && isset($msConfig['multisites.based_on_domains']));
    }

    /**
     * Check if the current request is done on the main site or not.
     *
     * @return boolean True if the main site is requested, false otherwise.
     */
    protected function isMainSite()
    {
        global $ZConfig;

        if (!isset($ZConfig['Multisites'])) {
            return true;
        }
        $msConfig = $ZConfig['Multisites'];

        $isBasedOnDomains = isset($msConfig['multisites.based_on_domains']) ? $msConfig['multisites.based_on_domains'] : 1;
        $mainUrl = isset($msConfig['multisites.mainsiteurl']) ? $msConfig['multisites.mainsiteurl'] : '';

        return ($isBasedOnDomains == 0 && $mainUrl == $this->request->query->get('sitedns', '')
            || ($isBasedOnDomains == 1 && $mainUrl == $_SERVER['HTTP_HOST']));
    }

    /**
     * This method takes care of the application configuration.
     *
     * @return string Output
     */
    public function config()
    {
        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // create new instance of configurator
        $configurator = new Multisites_Util_Configurator($this->serviceManager);
        $configValid = $configurator->verify($this->view);

        // if configuration is not completed we show special content
        if (!$configValid) {
            return $this->view->fetch('admin/wizard.tpl');
        }

        // check whether the global administrator has already been configured
        $globalAdminStatus = '';
        if ($this->getVar('globalAdminName', '') == '' || $this->getVar('globalAdminPassword', '') == '' || $this->getVar('globalAdminEmail', '') == '') {
            $globalAdminStatus = $this->__('Please configure the global administrator settings.');
        }
        SessionUtil::setVar('globalAdminStatus', $globalAdminStatus);

        // else we call the parent method to render the default configuration form
        return parent::config();
    }

    /**
     * Fallback view method for bc compatible behaviour.
     */
    public function view()
    {
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'site', FILTER_SANITIZE_STRING);

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'view', array('lct' => 'admin'));
    }

    /**
     * Fallback display method for bc compatible behaviour.
     */
    public function display()
    {
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'site', FILTER_SANITIZE_STRING);

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'display', array('lct' => 'admin'));
    }

    /**
     * Fallback edit method for bc compatible behaviour.
     */
    public function edit()
    {
        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');

            return $this->redirect($redirectUrl);
        }

        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'site', FILTER_SANITIZE_STRING);

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'edit', array('lct' => 'admin'));
    }

    /**
     * Fallback delete method for bc compatible behaviour.
     */
    public function delete()
    {
        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');

            return $this->redirect($redirectUrl);
        }

        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'site', FILTER_SANITIZE_STRING);

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'delete', array('lct' => 'admin'));
    }

    /**
     * Fallback custom method for bc compatible behaviour.
     */
    public function reapply()
    {
        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');

            return $this->redirect($redirectUrl);
        }

        $objectType = 'template';

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'reapply', array('lct' => 'admin'));
    }

    /**
     * Fallback custom method for bc compatible behaviour.
     */
    public function manageExtensions()
    {
        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');

            return $this->redirect($redirectUrl);
        }

        $objectType = 'site';

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'manageExtensions', array('lct' => 'admin'));
    }

    /**
     * Fallback custom method for bc compatible behaviour.
     */
    public function manageThemes()
    {
        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');

            return $this->redirect($redirectUrl);
        }

        $objectType = 'site';

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'manageThemes', array('lct' => 'admin'));
    }

    /**
     * Fallback custom method for bc compatible behaviour.
     */
    public function exportDatabaseAsTemplate()
    {
        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');

            return $this->redirect($redirectUrl);
        }

        $objectType = 'site';

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'exportDatabaseAsTemplate', array('lct' => 'admin'));
    }

    /**
     * Fallback custom method for bc compatible behaviour.
     */
    public function viewTools()
    {
        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');

            return $this->redirect($redirectUrl);
        }

        $objectType = 'site';

        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // redirect to entity controller
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');

        return ModUtil::func($this->name, $objectType, 'viewTools', array('lct' => 'admin'));
    }

    /**
     * Core and module update management.
     *
     * @return mixed Output.
     */
    public function manageUpdates()
    {
        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');
            return $this->redirect($redirectUrl);
        }

        return parent::manageUpdates();
    }
    
    /**
     * Provides a generic sql shell.
     *
     * @return mixed Output.
     */
    public function multiplyQueries()
    {
        // return error if we are not on the main site
        $this->throwForbiddenUnless($this->isMainSite() || !$this->isConfigured());

        // return error if no permissions are granted
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        // check if configuration is required
        $configRequired = !$this->isConfigured();
        if ($configRequired) {
            $redirectUrl = ModUtil::url($this->name, 'admin', 'config');
            return $this->redirect($redirectUrl);
        }

        // get all sites
        $sites = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'site', 'where' => '', 'useJoins' => false));
        if ($sites === false) {
            return false;
        }

        // build lists of databases, database types and hosts
        $databases = array();
        $databaseTypes = array();
        $databaseHosts = array();
        foreach ($sites as $site) {
            $dbHost = $site->getDatabaseHost();
            $dbType = $site->getDatabaseType();

            if (!in_array($dbHost, $databaseHosts)) {
                $databaseHosts[] = $dbHost;
            }

            if (!in_array($dbType, $databaseTypes)) {
                $databaseTypes[] = $dbType;
            }

            $databases[] = $site->getDatabaseData();
        }

        $sqlInput = '';
        $sqlOutput = '';
        $databaseHostsSelected = array();
        $databaseTypesSelected = array();

        // check whether the form has been submitted
        if (isset($_POST['submit'])) {
            $this->checkCsrfToken();

            $inputValid = true;

            $sqlInput = $this->request->request->get('inputquery', '');
            if (empty($sqlInput) && isset($_FILES['queryfile']) && is_array($_FILES['queryfile']) && isset($_FILES['queryfile']['tmp_name']) && is_file($_FILES['queryfile']['tmp_name']) && is_readable($_FILES['queryfile']['tmp_name'])) {
                $sqlInput = file_get_contents($_FILES['queryfile']['tmp_name']);
            }
            if (empty($sqlInput)) {
                LogUtil::registerError($this->__('Error! Please enter some sql commands or provide a sql file.'));
                $inputValid = false;
            }

            $databaseHostsSelected = $this->request->request->get('dbhosts', array());
            $databaseTypesSelected = $this->request->request->get('dbtypes', array());
            if (count($databaseHostsSelected) < 1 || count($databaseTypesSelected) < 1) {
                if (count($databaseHostsSelected) < 1) {
                    LogUtil::registerError($this->__('Error! Please select at least one database host.'));
                }
                if (count($databaseTypesSelected) < 1) {
                    LogUtil::registerError($this->__('Error! Please select at least one database type.'));
                }
                $inputValid = false;
            }

            if ($inputValid === true) {
                $opMode = $this->request->request->get('opmode', '');
                if (!in_array($opMode, array('show', 'execute'))) {
                    $opMode = 'show';
                }

                $systemHelper = $opMode == 'execute' ? new Multisites_Util_System($this->serviceManager) : null;

                foreach ($databases as $database) {
                    // check whether the db host should be processed
                    if (!in_array($database['dbhost'], $databaseHostsSelected)) {
                        continue;
                    }
                    // check whether the db type should be processed
                    if (!in_array($database['dbtype'], $databaseTypesSelected)) {
                        continue;
                    }

                    $dbName = $database['dbname'];
                    $sql = str_replace('###DBNAME###', $dbName, $sqlInput);
                    if ($opMode == 'show') {
                        // add sql to output
                        $sqlOutput .= "\n\n";
                        $sqlOutput .= '# ------ ' . $this->__('Site alias') . ': ' . $database['alias'] . ', ' . $this->__('Database name') . ': ' . $dbName . "\n\n";
                        $sqlOutput .= $sql;
                        $sqlOutput .= "\n\n";
                    } elseif ($opMode == 'execute') {
                        // run sql in site database
                        $connect = $systemHelper->connectToExternalDatabase($database);
                        if (!$connect) {
                            LogUtil::registerError($this->__f('Error! Connecting to the database %s failed.', array($dbName)));
                            continue;
                        }
                        $stmt = $connect->prepare($sql);
                        if (!$stmt->execute()) {
                            LogUtil::registerError($this->__f('Error during executing query in database %s.', array($dbName)));
                        } else {
                            LogUtil::registerStatus($this->__f('Query executed in database %s successfully.', array($dbName)));
                        }
                    }
                }
            }
        } else {
            // select all hosts per default
            foreach ($databaseHosts as $host) {
                $databaseHostsSelected[] = $host;
            }

            // select all types per default
            foreach ($databaseTypes as $dbType) {
                $databaseTypesSelected[] = $dbType;
            }
        }

        $this->view->assign('databases', $databases)
                   ->assign('databaseHosts', $databaseHosts)
                   ->assign('databaseTypes', $databaseTypes)
                   ->assign('databaseHostsSelected', $databaseHostsSelected)
                   ->assign('databaseTypesSelected', $databaseTypesSelected)
                   ->assign('sqlInput', $sqlInput)
                   ->assign('sqlOutput', $sqlOutput);

        // return template
        return $this->view->fetch('admin/multiplyQueries.tpl');
    }
}
