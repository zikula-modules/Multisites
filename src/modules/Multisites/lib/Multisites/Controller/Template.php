<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Multisites
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Template controller class providing navigation and interaction functionality.
 */
class Multisites_Controller_Template extends Multisites_Controller_Base_Template
{
    /**
     * Creates a CSV file which can be used for entering parameter values
     * for sites based on this template.
     *
     * @return mixed Output.
     */
    public function createParametersCsvTemplate()
    {
        $legacyControllerType = $this->request->query->filter('lct', 'user', FILTER_SANITIZE_STRING);
        System::queryStringSetVar('type', $legacyControllerType);
        $this->request->query->set('type', $legacyControllerType);

        $controllerHelper = new Multisites_Util_Controller($this->serviceManager);

        // parameter specifying which type of objects we are treating
        $objectType = 'template';
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());
        $entityClass = $this->name . '_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setControllerArguments(array());

        $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));

        // retrieve identifier of the object we wish to view
        $idValues = $controllerHelper->retrieveIdentifier($this->request, array(), $objectType, $idFields);
        $hasIdentifier = $controllerHelper->isValidIdentifier($idValues);

        $this->throwNotFoundUnless($hasIdentifier, $this->__('Error! Invalid identifier received.'));

        $selectionArgs = array('ot' => $objectType, 'id' => $idValues);

        $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', $selectionArgs);
        $this->throwNotFoundUnless($entity != null, $this->__('No such item.'));
        unset($idValues);
        
        $entity->initWorkflow();

        $delimiter = ';';
        $f = fopen('php://memory', 'w'); 
        fputcsv($f, array('Name', 'Wert'), $delimiter); 
        foreach ($entity->getParameters() as $paramName) {
            $line = array($paramName, '');
            fputcsv($f, $line, $delimiter); 
        }

        // rewind file pointer
        fseek($f, 0);

        // create name of the csv output file
        $fileTitle = $controllerHelper->formatPermalink($entity->getTitleFromDisplayPattern())
                   . '-parameters-' . date('Ymd') . '.csv';

        header('Content-Type: application/csv');
        header('Content-Disposition: attachment; filename="' . $fileTitle . '"');

        // send csv lines to the browser
        fpassthru($f);

        return true;
    }

    /**
     * Reapplies the template on all sites assigned to it.
     *
     * @return mixed Output.
     */
    public function reapply()
    {
        $legacyControllerType = $this->request->query->filter('lct', 'user', FILTER_SANITIZE_STRING);
        System::queryStringSetVar('type', $legacyControllerType);
        $this->request->query->set('type', $legacyControllerType);
    
        $controllerHelper = new Multisites_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = 'template';
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));
        
        // retrieve identifier of the object we wish to delete
        $idValues = $controllerHelper->retrieveIdentifier($this->request, array(), $objectType, $idFields);
        $hasIdentifier = $controllerHelper->isValidIdentifier($idValues);
        
        $this->throwNotFoundUnless($hasIdentifier, $this->__('Error! Invalid identifier received.'));
        
        $selectionArgs = array('ot' => $objectType, 'id' => $idValues);
        
        $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', $selectionArgs);
        $this->throwNotFoundUnless($entity != null, $this->__('No such item.'));
        
        $entity->initWorkflow();

        $redirectUrl = ModUtil::url($this->name, 'admin', 'view', array('ot' => 'template'));

        $sites = $entity['sites'];
        $amountOfSites = count($sites);
        if ($amountOfSites < 1) {
            LogUtil::registerError($this->__('Error! This template does not have any sites assigned yet.'));

            return $this->redirect($redirectUrl);
        }

        $confirmation = (bool) $this->request->request->filter('confirmation', false, FILTER_VALIDATE_BOOLEAN);
        if ($confirmation) {
            $this->checkCsrfToken();

            $systemHelper = new Multisites_Util_System($this->serviceManager);

            // perform initialisation process for all sites assigned to this template
            foreach ($sites as $site) {
                if (!$systemHelper->setupDatabaseContent($site)) {
                    // error has been registered already
                    return $this->redirect($redirectUrl);
                }
            }

            LogUtil::registerStatus($this->_fn('The template has been reapplied to %s site.', 'The template has been reapplied to %s sites.', $amountOfSites, array($amountOfSites)));

            return $this->redirect($redirectUrl);
        }

        $this->view->assign('template', $entity);

        // return template
        return $this->view->fetch('template/reapply.tpl');
    }
}
