<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Multisites
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * This handler class handles the page events of the Form called by the multisites_template_edit() function.
 * It aims on the template object type.
 */
class Multisites_Form_Handler_Template_Edit extends Multisites_Form_Handler_Template_Base_Edit
{
    /**
     * Pre-initialise hook.
     *
     * @return void
     */
    public function preInitialize()
    {
        parent::preInitialize();
    
        // set mandatory flag to false
        $this->uploadFields['sqlFile'] = false;
    }

    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
        parent::postInitialize();

        $this->initAdditions();
    }

    protected function initAdditions()
    {
        // build distinct list of all existing sql files
        $templates = ModUtil::apiFunc($this->name, 'selection', 'getEntities', array('ot' => 'template'));
        $sqlFiles = array();
        foreach ($templates as $template) {
            if (in_array($template['sqlFile'], $sqlFiles)) {
                continue;
            }
            $sqlFiles[$template['id']] = $template['sqlFile'];
        }

        $entity = $this->entityRef;
        $sqlFileSelected = 0;
        if ($this->mode != 'create') {
            $sqlFileSelected = $entity['id'];
            // ensure own id is used in sql file list
            foreach ($sqlFiles as $id => $sqlFile) {
                if ($sqlFile != $entity['sqlFile']) {
                    continue;
                }
                if ($id != $sqlFileSelected) {
                    unset($sqlFiles[$id]);
                    $sqlFiles[$sqlFileSelected] = $sqlFile;
                }
                break;
            }
        } elseif ($this->hasTemplateId === true) {
            // creation based on reuse
            foreach ($sqlFiles as $id => $sqlFile) {
                if ($sqlFile != $entity['sqlFile']) {
                    continue;
                }
                $sqlFileSelected = $id;
                break;
            }
        }

        $sqlFileSelectedOptions = array();
        $sqlFileSelectedOptions[] = array('value' => 0, 'text' => $this->__('Select an existing file...'));

        foreach ($sqlFiles as $id => $sqlFile) {
            $sqlFileSelectedOptions[] = array('value' => $id, 'text' => $sqlFile);
        }

        $additions = array(
            'sqlFileSelected' => $sqlFileSelected,
            'sqlFileSelectedItems' => $sqlFileSelectedOptions
        );

        $this->view->assign('additions', $additions);
    }

    /**
     * Helper method to process upload fields.
     *
     * @param array  $formData       The form input data.
     * @param object $existingObject Data of existing entity object.
     *
     * @return array form data after processing.
     */
    protected function handleUploads($formData, $existingObject)
    {
        if (!count($this->uploadFields)) {
            return $formData;
        }

        // check if either an upload file has been provided or an existing sql file has been selected
        $hasSqlUpload = true;
        if (!$formData['sqlFile'] || $formData['sqlFile']['size'] == 0) {
            $otherFormData = $this->view->getValues();
            if (!isset($otherFormData['additions']) || !is_array($otherFormData['additions']) || !isset($otherFormData['additions']['sqlFileSelected']) || $otherFormData['additions']['sqlFileSelected'] < 1) {
                return LogUtil::registerError($this->__('Error! Please either provide a sql file or select an existing one.'));
            }
            $hasSqlUpload = false;
        }

        // initialise the upload handler
        $uploadManager = new Multisites_UploadHandler();
        $existingObjectData = $existingObject->toArray();
    
        $objectId = ($this->mode != 'create') ? $this->idValues[0] : 0;

        // process all fields
        foreach ($this->uploadFields as $uploadField => $isMandatory) {
            if ($uploadField == 'sqlFile') {
                // check if an existing file must be deleted
                $hasOldFile = (!empty($existingObjectData[$uploadField]));
                $hasBeenDeleted = !$hasOldFile;
                if ($this->mode != 'create') {
                    if (isset($formData[$uploadField . 'DeleteFile'])) {
                        if ($hasOldFile && $formData[$uploadField . 'DeleteFile'] === true && !$existingObject->isSqlFileReferencedByOtherTemplates()) {
                            // remove upload file (and image thumbnails)
                            $existingObjectData = $uploadManager->deleteUploadFile($this->objectType, $existingObjectData, $uploadField, $objectId);
                            if (empty($existingObjectData[$uploadField])) {
                                $existingObject[$uploadField] = '';
                                $existingObject[$uploadField . 'Meta'] = array();
                            }
                        }
                        unset($formData[$uploadField . 'DeleteFile']);
                        $hasBeenDeleted = true;
                    }
                }
        
                // look whether a file has been provided
                if (!$formData[$uploadField] || $formData[$uploadField]['size'] == 0) {
                    // no file has been uploaded
                    unset($formData[$uploadField]);
                    // skip to next one
                    continue;
                }
        
                if ($hasOldFile && $hasBeenDeleted !== true && $this->mode != 'create' && !$existingObject->isSqlFileReferencedByOtherTemplates()) {
                    // remove old upload file (and image thumbnails)
                    $existingObjectData = $uploadManager->deleteUploadFile($this->objectType, $existingObjectData, $uploadField, $objectId);
                    if (empty($existingObjectData[$uploadField])) {
                        $existingObject[$uploadField] = '';
                        $existingObject[$uploadField . 'Meta'] = array();
                    }
                }

                if ($hasSqlUpload) {
                    // do the actual upload (includes validation, physical file processing and reading meta data)
                    $uploadResult = $uploadManager->performFileUpload($this->objectType, $formData, $uploadField);
                    // assign the upload file name
                    $formData[$uploadField] = $uploadResult['fileName'];
                    // assign the meta data
                    $formData[$uploadField . 'Meta'] = $uploadResult['metaData'];
                } else {
                    // check if the selected sql file is different from the current one
                    $selectedFileTemplateId = $otherFormData['additions']['sqlFileSelected'];
                    if ($this->mode == 'create' || $selectedFileTemplateId != $existingObjectData['id']) {
                        // update file information from original template
                        $referencedTemplate = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => 'template', 'id' => $selectedFileTemplateId));
                        $formData[$uploadField] = $referencedTemplate[$uploadField];
                        $formData[$uploadField . 'Meta'] = $referencedTemplate[$uploadField . 'Meta'];
                    }
                }

                // if current field is mandatory check if everything has been done
                if ($isMandatory && empty($formData[$uploadField])) {
                    // mandatory upload has not been completed successfully
                    return false;
                }
        
                // upload succeeded
            } else {
                // check if an existing file must be deleted
                $hasOldFile = (!empty($existingObjectData[$uploadField]));
                $hasBeenDeleted = !$hasOldFile;
                if ($this->mode != 'create') {
                    if (isset($formData[$uploadField . 'DeleteFile'])) {
                        if ($hasOldFile && $formData[$uploadField . 'DeleteFile'] === true) {
                            // remove upload file (and image thumbnails)
                            $existingObjectData = $uploadManager->deleteUploadFile($this->objectType, $existingObjectData, $uploadField, $objectId);
                            if (empty($existingObjectData[$uploadField])) {
                                $existingObject[$uploadField] = '';
                                $existingObject[$uploadField . 'Meta'] = array();
                            }
                        }
                        unset($formData[$uploadField . 'DeleteFile']);
                        $hasBeenDeleted = true;
                    }
                }
        
                // look whether a file has been provided
                if (!$formData[$uploadField] || $formData[$uploadField]['size'] == 0) {
                    // no file has been uploaded
                    unset($formData[$uploadField]);
                    // skip to next one
                    continue;
                }
        
                if ($hasOldFile && $hasBeenDeleted !== true && $this->mode != 'create') {
                    // remove old upload file (and image thumbnails)
                    $existingObjectData = $uploadManager->deleteUploadFile($this->objectType, $existingObjectData, $uploadField, $objectId);
                    if (empty($existingObjectData[$uploadField])) {
                        $existingObject[$uploadField] = '';
                        $existingObject[$uploadField . 'Meta'] = array();
                    }
                }
        
                // do the actual upload (includes validation, physical file processing and reading meta data)
                $uploadResult = $uploadManager->performFileUpload($this->objectType, $formData, $uploadField);
                // assign the upload file name
                $formData[$uploadField] = $uploadResult['fileName'];
                // assign the meta data
                $formData[$uploadField . 'Meta'] = $uploadResult['metaData'];
        
                // if current field is mandatory check if everything has been done
                if ($isMandatory && empty($formData[$uploadField])) {
                    // mandatory upload has not been completed successfully
                    return false;
                }
        
                // upload succeeded
            }
        }
    
        return $formData;
    }
}
