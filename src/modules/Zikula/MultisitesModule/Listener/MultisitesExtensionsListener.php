<?php
/**
 * Multisites.
 *
 * @copyright Albert PÃ©rez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert PÃ©rez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.0.1 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Listener;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\Core\Event\GenericEvent;
use Zikula\ExtensionsModule\Constant as ExtensionsConstant;
use Zikula\ExtensionsModule\ExtensionEvents;
use Zikula\PermissionsModule\Api\ApiInterface\PermissionApiInterface;

/**
 * Event handler implementation class for extensions events.
 */
class MultisitesExtensionsListener implements EventSubscriberInterface
{
    use TranslatorTrait;

    /**
     * @var RequestStack
     */
    private $requestStack;

    /**
     * @var PermissionApiInterface
     */
    private $permissionApi;

    /**
     * @var array
     */
    private $multisitesParameters;

    /**
     * MultisitesExtensionsListener constructor.
     *
     * @param TranslatorInterface    $translator           Translator service instance
     * @param RequestStack           $requestStack         RequestStack service instance
     * @param PermissionApiInterface $permissionApi        PermissionApi service instance
     * @param array                  $multisitesParameters Multisites parameters array
     */
    public function __construct(
        TranslatorInterface $translator,
        RequestStack $requestStack,
        PermissionApiInterface $permissionApi,
        array $multisitesParameters
    ) {
        $this->setTranslator($translator);
        $this->requestStack = $requestStack;
        $this->permissionApi = $permissionApi;
        $this->multisitesParameters = $multisitesParameters;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance.
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    public static function getSubscribedEvents()
    {
        return [
            ExtensionEvents::REGENERATE_VETO => 'checkAllowed',
            ExtensionEvents::INSERT_VETO => 'checkAllowed',
            ExtensionEvents::REMOVE_VETO => 'remove',
            ExtensionEvents::UPDATE_STATE => 'updateState'
        ];
    }

    public function checkAllowed(GenericEvent $event)
    {
        if (!$this->multisitesParameters['enabled'] || $this->isAllowed()) {
            return;
        }

        $event->stopPropagation();
    }

    public function remove(GenericEvent $event)
    {
        if (!$this->multisitesParameters['enabled'] || $this->isAllowed()) {
            return;
        }

        $currentState = $event->getSubject()->getState();
        if (in_array($currentState, [ExtensionsConstant::STATE_NOTALLOWED, ExtensionsConstant::STATE_MISSING, ExtensionsConstant::STATE_INVALID])) {
            return;
        }

        $event->stopPropagation();
    }

    public function updateState(GenericEvent $event)
    {
        if ($this->multisitesParameters['enabled'] && $event->getArgument('state') == ExtensionsConstant::STATE_UNINITIALISED) {
            if (!$this->permissionApi->hasPermission('ZikulaExtensionsModule::', '::', ACCESS_ADMIN)) {
                throw new \RuntimeException($this->translator->__('Error! Invalid module state transition.'));
            }
        }
    }

    private function isAllowed()
    {
        $request = $this->requestStack->getMasterRequest();
        // only the main site can regenerate modules/themes lists and remove components
        if (($this->multisitesParameters['mainsiteurl'] == $request->query->get('sitedns', null)
                && $this->multisitesParameters['based_on_domains'] == false)
            || ($this->multisitesParameters['mainsiteurl'] == $request->server->get('HTTP_HOST')
                && $this->multisitesParameters['based_on_domains'] == true)
        ) {
            return true;
        }

        return false;
    }
}
