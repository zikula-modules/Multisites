<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Twig\Base;

/**
 * Twig extension base class.
 */
class TwigExtension extends \Twig_Extension
{
    /**
     * Returns a list of custom Twig functions.
     *
     * @return array
     */
    public function getFunctions()
    {
        return [
            new \Twig_SimpleFunction('zikulamultisitesmodule_templateHeaders', [$this, 'templateHeaders']),
            new \Twig_SimpleFunction('zikulamultisitesmodule_objectTypeSelector', [$this, 'getObjectTypeSelector']),
            new \Twig_SimpleFunction('zikulamultisitesmodule_templateSelector', [$this, 'getTemplateSelector']),
            new \Twig_SimpleFunction('zikulamultisitesmodule_userVar', [$this, 'getUserVar']),
            new \Twig_SimpleFunction('zikulamultisitesmodule_userAvatar', [$this, 'getUserAvatar']),
            new \Twig_SimpleFunction('zikulamultisitesmodule_thumb', [$this, 'getImageThumb'])
        ];
    }
    
    /**
     * Returns a list of custom Twig filters.
     *
     * @return array
     */
    public function getFilters()
    {
        return [
            new \Twig_SimpleFilter('zikulamultisitesmodule_actionUrl', [$this, 'buildActionUrl']),
            new \Twig_SimpleFilter('zikulamultisitesmodule_objectState', [$this, 'getObjectState']),
            new \Twig_SimpleFilter('zikulamultisitesmodule_fileSize', [$this, 'getFileSize']),
            new \Twig_SimpleFilter('zikulamultisitesmodule_listEntry', [$this, 'getListEntry']),
            new \Twig_SimpleFilter('zikulamultisitesmodule_profileLink', [$this, 'profileLink'])
        ];
    }
    
    /**
     * The zikulamultisitesmodule_templateSelector function provides items for a dropdown selector.
     *
     * @return string The output of the plugin.
     */
    public function getTemplateSelector()
    {
        $serviceManager = \ServiceUtil::getManager();
        $translator = $serviceManager->get('translator');
        $result = [];
    
        $result[] = ['text' => $translator->__('Only item titles'), 'value' => 'itemlist_display.html.twig'];
        $result[] = ['text' => $translator->__('With description'), 'value' => 'itemlist_display_description.html.twig'];
        $result[] = ['text' => $translator->__('Custom template'), 'value' => 'custom'];
    
        return $result;
    }
    
    /**
     * Returns the value of a user variable.
     *
     * @param string     $name    Name of desired property.
     * @param int        $uid     The user's id.
     * @param string|int $default The default value.
     *
     * @return string
     */
    public function getUserVar($name, $uid = -1, $default = '')
    {
        if (!$uid) {
            $uid = -1;
        }
    
        $result = \UserUtil::getVar($name, $uid, $default);
    
        return $result;
    }
    
    /**
     * Display the avatar of a user.
     *
     * @param int    $uid    The user's id.
     * @param int    $width  Image width (optional).
     * @param int    $height Image height (optional).
     * @param int    $size   Gravatar size (optional).
     * @param string $rating Gravatar self-rating [g|pg|r|x] see: http://en.gravatar.com/site/implement/images/ (optional).
     *
     * @return string
     */
    public function getUserAvatar($uid, $width, $height, $size, $rating)
    {
        $params = ['uid' => $uid];
        if ($width) {
            $params['width'] = $width;
        }
        if ($height) {
            $params['height'] = $height;
        }
        if ($size) {
            $params['size'] = $size;
        }
        if ($rating) {
            $params['rating'] = $rating;
        }
    
        include_once 'lib/legacy/viewplugins/function.useravatar.php';
    
        $view = \Zikula_View::getInstance('ZikulaMultisitesModule');
        $result = smarty_function_useravatar($params, $view);
    
        return $result;
    }
    
    /**
     * Display an image thumbnail using Imagine system plugin.
     *
     * @param array $params Parameters assigned to bridged Smarty plugin.
     *
     * @return string Thumb path.
     */
    public function getImageThumb($params)
    {
        include_once 'plugins/Imagine/templates/plugins/function.thumb.php';
    
        $view = \Zikula_View::getInstance('ZikulaMultisitesModule');
        $result = smarty_function_thumb($params, $view);
    
        return $result;
    }
    
    /**
     * Returns a link to the user's profile.
     *
     * @param int     $uid       The user's id (optional).
     * @param string  $class     The class name for the link (optional).
     * @param integer $maxLength If set then user names are truncated to x chars.
     *
     * @return string
     */
    public function profileLink($uid, $class = '', $maxLength = 0)
    {
        $result = '';
        $image = '';
    
        if ($uid == '') {
            return $result;
        }
    
        if (\ModUtil::getVar('ZConfig', 'profilemodule') != '') {
            include_once 'lib/legacy/viewplugins/modifier.profilelinkbyuid.php';
            $result = smarty_modifier_profilelinkbyuid($uid, $class, $image, $maxLength);
        } else {
            $result = \UserUtil::getVar('uname', $uid);
        }
    
        return $result;
    }
    
    /**
     * Returns internal name of this extension.
     *
     * @return string
     */
    public function getName()
    {
        return 'zikulamultisitesmodule_twigextension';
    }
}
