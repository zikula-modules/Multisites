<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Container\Base;

use Symfony\Component\Routing\RouterInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\Core\LinkContainer\LinkContainerInterface;
use Zikula\PermissionsModule\Api\PermissionApi;
use Zikula\MultisitesModule\Helper\ControllerHelper;

/**
 * This is the link container service implementation class.
 */
class LinkContainer implements LinkContainerInterface
{
    use TranslatorTrait;

    /**
     * @var RouterInterface
     */
    protected $router;

    /**
     * @var PermissionApi
     */
    protected $permissionApi;

    /**
     * @var ControllerHelper
     */
    protected $controllerHelper;

    /**
     * Constructor.
     * Initialises member vars.
     *
     * @param TranslatorInterface $translator       Translator service instance.
     * @param Routerinterface     $router           Router service instance.
     * @param PermissionApi       $permissionApi    PermissionApi service instance.
     * @param ControllerHelper    $controllerHelper ControllerHelper service instance.
     */
    public function __construct(TranslatorInterface $translator, RouterInterface $router, PermissionApi $permissionApi, ControllerHelper $controllerHelper)
    {
        $this->setTranslator($translator);
        $this->router = $router;
        $this->permissionApi = $permissionApi;
        $this->controllerHelper = $controllerHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance.
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * Returns available header links.
     *
     * @param string $type The type to collect links for.
     *
     * @return array Array of header links.
     */
    public function getLinks($type = LinkContainerInterface::TYPE_ADMIN)
    {
        $utilArgs = ['api' => 'linkContainer', 'action' => 'getLinks'];
        $allowedObjectTypes = $this->controllerHelper->getObjectTypes('api', $utilArgs);

        $permLevel = LinkContainerInterface::TYPE_ADMIN == $type ? ACCESS_ADMIN : ACCESS_READ;

        // Create an array of links to return
        $links = [];

        
        if (LinkContainerInterface::TYPE_ADMIN == $type) {
            
            if (in_array('site', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':Site:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('zikulamultisitesmodule_site_adminview'),
                     'text' => $this->translator->__('Sites'),
                     'title' => $this->translator->__('Site list')
                 ];
            }
            if (in_array('template', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':Template:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('zikulamultisitesmodule_template_adminview'),
                     'text' => $this->translator->__('Templates'),
                     'title' => $this->translator->__('Template list')
                 ];
            }
            if (in_array('siteExtension', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':SiteExtension:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('zikulamultisitesmodule_siteextension_adminview'),
                     'text' => $this->translator->__('Site extensions'),
                     'title' => $this->translator->__('Site extension list')
                 ];
            }
            if (in_array('project', $allowedObjectTypes)
                && $this->permissionApi->hasPermission($this->getBundleName() . ':Project:', '::', $permLevel)) {
                $links[] = [
                    'url' => $this->router->generate('zikulamultisitesmodule_project_adminview'),
                     'text' => $this->translator->__('Projects'),
                     'title' => $this->translator->__('Project list')
                 ];
            }
            if ($this->permissionApi->hasPermission($this->getBundleName() . '::', '::', ACCESS_ADMIN)) {
                $links[] = [
                    'url' => $this->router->generate('zikulamultisitesmodule_admin_config'),
                     'text' => $this->translator->__('Configuration'),
                     'title' => $this->translator->__('Manage settings for this application'),
                     'icon' => 'wrench'
                 ];
            }
        }

        return $links;
    }

    public function getBundleName()
    {
        return 'ZikulaMultisitesModule';
    }
}
