<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Entity;

use Zikula\MultisitesModule\Entity\Base\AbstractProjectEntity as BaseAbstractProjectEntity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;
use Symfony\Component\Validator\Constraints as Assert;
use ServiceUtil;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for project entities.
 * @ORM\Entity(repositoryClass="\Zikula\MultisitesModule\Entity\Repository\Project")
 * @ORM\Table(name="zikula_multisites_project",
 *     indexes={
*         @ORM\Index(name="workflowstateindex", columns={"workflowState"})
 *     }
 * )
* @ORM\HasLifecycleCallbacks
 */
class ProjectEntity extends BaseAbstractProjectEntity
{
    // feel free to add your own methods here

    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     *
     * @ORM\PostLoad
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPostLoadCallback()
     * @return void.
     */
    public function postLoadCallback()
    {
        $this->performPostLoadCallback();
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     *
     * @ORM\PrePersist
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPrePersistCallback()
     * @return void.
     */
    public function prePersistCallback()
    {
        $this->performPrePersistCallback();
    }
    
    /**
     * Post-Process the data after an insert operation.
     *
     * @ORM\PostPersist
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPostPersistCallback()
     * @return void.
     */
    public function postPersistCallback()
    {
        $this->performPostPersistCallback();
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     *
     * @ORM\PreRemove
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPreRemoveCallback()
     * @return void.
     */
    public function preRemoveCallback()
    {
        $this->performPreRemoveCallback();
    }
    
    /**
     * Post-Process the data after a delete.
     *
     * @ORM\PostRemove
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPostRemoveCallback()
     * @return void
     */
    public function postRemoveCallback()
    {
        $this->performPostRemoveCallback();
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     *
     * @ORM\PreUpdate
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPreUpdateCallback()
     * @return void.
     */
    public function preUpdateCallback()
    {
        $this->performPreUpdateCallback();
    }
    
    /**
     * Post-Process the data after an update operation.
     *
     * @ORM\PostUpdate
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPostUpdateCallback()
     * @return void.
     */
    public function postUpdateCallback()
    {
        $this->performPostUpdateCallback();
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPreSaveCallback()
     * @return void.
     */
    public function preSaveCallback()
    {
        $this->performPreSaveCallback();
    }
    
    /**
     * Post-Process the data after a save operation.
     *
     * @ORM\PostPersist
     * @ORM\PostUpdate
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::performPostSaveCallback()
     * @return void.
     */
    public function postSaveCallback()
    {
        $this->performPostSaveCallback();
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see Zikula\MultisitesModule\Entity\ProjectEntity::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $systemHelper = $serviceManager->get('zikula_multisites_module.system_helper');

        // update db config removing all obsolete databases
        if (!$systemHelper->updateDatabaseConfigFile()) {
            $session = $serviceManager->get('session');
            $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator')->__('Error! Updating the database configuration file failed.'));
        }

        return parent::performPostRemoveCallback();
    }
}
