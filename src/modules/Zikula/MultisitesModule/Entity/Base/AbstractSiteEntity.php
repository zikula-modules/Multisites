<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;

use DataUtil;
use FormUtil;
use RuntimeException;
use ServiceUtil;
use UserUtil;
use Zikula_Workflow_Util;
use Zikula\Core\Doctrine\EntityAccess;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for site entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractSiteEntity extends EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'site';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed
     */
    protected $_bypassValidation = false;
    
    /**
     * @var array The current workflow data of this object
     */
    protected $__WORKFLOW__ = [];
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=150)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="150")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $description
     */
    protected $description = '';
    
    /**
     * @ORM\Column(length=80)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="80")
     * @var string $siteAlias
     */
    protected $siteAlias = '';
    
    /**
     * @ORM\Column(length=150)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="150")
     * @var string $siteName
     */
    protected $siteName = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $siteDescription
     */
    protected $siteDescription = '';
    
    /**
     * @ORM\Column(length=25)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="25")
     * @var string $siteAdminName
     */
    protected $siteAdminName = 'admin';
    
    /**
     * @ORM\Column(length=15)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="15")
     * @var string $siteAdminPassword
     */
    protected $siteAdminPassword = '';
    
    /**
     * @ORM\Column(length=70)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="70")
     * @var string $siteAdminRealName
     */
    protected $siteAdminRealName = '';
    
    /**
     * @ORM\Column(length=40)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="40")
     * @Assert\Email(checkMX=false, checkHost=false)
     * @var string $siteAdminEmail
     */
    protected $siteAdminEmail = '';
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="100")
     * @var string $siteCompany
     */
    protected $siteCompany = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $siteDns
     */
    protected $siteDns = '';
    
    /**
     * @ORM\Column(length=50)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="50")
     * @var string $databaseName
     */
    protected $databaseName = '';
    
    /**
     * @ORM\Column(length=50)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="50")
     * @var string $databaseUserName
     */
    protected $databaseUserName = '';
    
    /**
     * @ORM\Column(length=50)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="50")
     * @var string $databasePassword
     */
    protected $databasePassword = '';
    
    /**
     * @ORM\Column(length=50)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="50")
     * @var string $databaseHost
     */
    protected $databaseHost = 'localhost';
    
    /**
     * @ORM\Column(length=25)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="25")
     * @var string $databaseType
     */
    protected $databaseType = '';
    
    /**
     * Logo meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $logoMeta
     */
    protected $logoMeta = [];
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $logo
     */
    protected $logo = '';
    
    /**
     * The full path to the logo.
     *
     * @Assert\Type(type="string")
     * @var string $logoFullPath
     */
    protected $logoFullPath = '';
    
    /**
     * Full logo path as url.
     *
     * @Assert\Type(type="string")
     * @var string $logoFullPathUrl
     */
    protected $logoFullPathUrl = '';
    /**
     * Fav icon meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $favIconMeta
     */
    protected $favIconMeta = [];
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @var File $favIcon
     */
    protected $favIcon = '';
    
    /**
     * The full path to the fav icon.
     *
     * @Assert\Type(type="string")
     * @var string $favIconFullPath
     */
    protected $favIconFullPath = '';
    
    /**
     * Full fav icon path as url.
     *
     * @Assert\Type(type="string")
     * @var string $favIconFullPathUrl
     */
    protected $favIconFullPathUrl = '';
    /**
     * @ORM\Column(type="array")
     * @Assert\NotNull()
     * @Assert\Type(type="array")
     * @var array $allowedLocales
     */
    protected $allowedLocales = [];
    
    /**
     * Parameters csv file meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $parametersCsvFileMeta
     */
    protected $parametersCsvFileMeta = [];
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @var File $parametersCsvFile
     */
    protected $parametersCsvFile = '';
    
    /**
     * The full path to the parameters csv file.
     *
     * @Assert\Type(type="string")
     * @var string $parametersCsvFileFullPath
     */
    protected $parametersCsvFileFullPath = '';
    
    /**
     * Full parameters csv file path as url.
     *
     * @Assert\Type(type="string")
     * @var string $parametersCsvFileFullPathUrl
     */
    protected $parametersCsvFileFullPathUrl = '';
    /**
     * @ORM\Column(type="array")
     * @Assert\NotNull()
     * @Assert\Type(type="array")
     * @var array $parametersArray
     */
    protected $parametersArray = [];
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $active
     */
    protected $active = false;
    
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @Assert\Type(type="integer")
     * @var integer $createdUserId
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @Assert\Type(type="integer")
     * @var integer $updatedUserId
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @Assert\DateTime()
     * @var \DateTime $createdDate
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @Assert\DateTime()
     * @var \DateTime $updatedDate
     */
    protected $updatedDate;
    
    /**
     * Bidirectional - Many sites [sites] are linked by one template [template] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="Zikula\MultisitesModule\Entity\TemplateEntity", inversedBy="sites")
     * @ORM\JoinTable(name="zikula_multisites_template")
     * @Assert\Type(type="Zikula\MultisitesModule\Entity\TemplateEntity")
     * @Assert\Valid()
     * @var \Zikula\MultisitesModule\Entity\TemplateEntity $template
     */
    protected $template;
    
    /**
     * Bidirectional - Many sites [sites] are linked by one project [project] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="Zikula\MultisitesModule\Entity\ProjectEntity", inversedBy="sites")
     * @ORM\JoinTable(name="zikula_multisites_project")
     * @Assert\Type(type="Zikula\MultisitesModule\Entity\ProjectEntity")
     * @Assert\Valid()
     * @var \Zikula\MultisitesModule\Entity\ProjectEntity $project
     */
    protected $project;
    
    /**
     * Bidirectional - One site [site] has many extensions [site extensions] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="Zikula\MultisitesModule\Entity\SiteExtensionEntity", mappedBy="site", cascade={"remove"})
     * @ORM\JoinTable(name="zikula_multisites_siteextensions")
     * @ORM\OrderBy({"name" = "ASC"})
     * @var \Zikula\MultisitesModule\Entity\SiteExtensionEntity[] $extensions
     */
    protected $extensions = null;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->workflowState = 'initial';
        $this->initWorkflow();
        $this->extensions = new ArrayCollection();
    }
    
    /**
     * Gets the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Gets the _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Sets the _bypass validation.
     *
     * @param boolean $_bypassValidation
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Gets the __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Sets the __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__
     *
     * @return void
     */
    public function set__WORKFLOW__(array $__WORKFLOW__ = [])
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Gets the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    
    /**
     * Gets the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = $workflowState;
    }
    
    /**
     * Gets the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    
    /**
     * Gets the description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param string $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    
    /**
     * Gets the site alias.
     *
     * @return string
     */
    public function getSiteAlias()
    {
        return $this->siteAlias;
    }
    
    /**
     * Sets the site alias.
     *
     * @param string $siteAlias
     *
     * @return void
     */
    public function setSiteAlias($siteAlias)
    {
        $this->siteAlias = $siteAlias;
    }
    
    /**
     * Gets the site name.
     *
     * @return string
     */
    public function getSiteName()
    {
        return $this->siteName;
    }
    
    /**
     * Sets the site name.
     *
     * @param string $siteName
     *
     * @return void
     */
    public function setSiteName($siteName)
    {
        $this->siteName = $siteName;
    }
    
    /**
     * Gets the site description.
     *
     * @return string
     */
    public function getSiteDescription()
    {
        return $this->siteDescription;
    }
    
    /**
     * Sets the site description.
     *
     * @param string $siteDescription
     *
     * @return void
     */
    public function setSiteDescription($siteDescription)
    {
        $this->siteDescription = $siteDescription;
    }
    
    /**
     * Gets the site admin name.
     *
     * @return string
     */
    public function getSiteAdminName()
    {
        return $this->siteAdminName;
    }
    
    /**
     * Sets the site admin name.
     *
     * @param string $siteAdminName
     *
     * @return void
     */
    public function setSiteAdminName($siteAdminName)
    {
        $this->siteAdminName = $siteAdminName;
    }
    
    /**
     * Gets the site admin password.
     *
     * @return string
     */
    public function getSiteAdminPassword()
    {
        return $this->siteAdminPassword;
    }
    
    /**
     * Sets the site admin password.
     *
     * @param string $siteAdminPassword
     *
     * @return void
     */
    public function setSiteAdminPassword($siteAdminPassword)
    {
        $this->siteAdminPassword = $siteAdminPassword;
    }
    
    /**
     * Gets the site admin real name.
     *
     * @return string
     */
    public function getSiteAdminRealName()
    {
        return $this->siteAdminRealName;
    }
    
    /**
     * Sets the site admin real name.
     *
     * @param string $siteAdminRealName
     *
     * @return void
     */
    public function setSiteAdminRealName($siteAdminRealName)
    {
        $this->siteAdminRealName = $siteAdminRealName;
    }
    
    /**
     * Gets the site admin email.
     *
     * @return string
     */
    public function getSiteAdminEmail()
    {
        return $this->siteAdminEmail;
    }
    
    /**
     * Sets the site admin email.
     *
     * @param string $siteAdminEmail
     *
     * @return void
     */
    public function setSiteAdminEmail($siteAdminEmail)
    {
        $this->siteAdminEmail = $siteAdminEmail;
    }
    
    /**
     * Gets the site company.
     *
     * @return string
     */
    public function getSiteCompany()
    {
        return $this->siteCompany;
    }
    
    /**
     * Sets the site company.
     *
     * @param string $siteCompany
     *
     * @return void
     */
    public function setSiteCompany($siteCompany)
    {
        $this->siteCompany = $siteCompany;
    }
    
    /**
     * Gets the site dns.
     *
     * @return string
     */
    public function getSiteDns()
    {
        return $this->siteDns;
    }
    
    /**
     * Sets the site dns.
     *
     * @param string $siteDns
     *
     * @return void
     */
    public function setSiteDns($siteDns)
    {
        $this->siteDns = $siteDns;
    }
    
    /**
     * Gets the database name.
     *
     * @return string
     */
    public function getDatabaseName()
    {
        return $this->databaseName;
    }
    
    /**
     * Sets the database name.
     *
     * @param string $databaseName
     *
     * @return void
     */
    public function setDatabaseName($databaseName)
    {
        $this->databaseName = $databaseName;
    }
    
    /**
     * Gets the database user name.
     *
     * @return string
     */
    public function getDatabaseUserName()
    {
        return $this->databaseUserName;
    }
    
    /**
     * Sets the database user name.
     *
     * @param string $databaseUserName
     *
     * @return void
     */
    public function setDatabaseUserName($databaseUserName)
    {
        $this->databaseUserName = $databaseUserName;
    }
    
    /**
     * Gets the database password.
     *
     * @return string
     */
    public function getDatabasePassword()
    {
        return $this->databasePassword;
    }
    
    /**
     * Sets the database password.
     *
     * @param string $databasePassword
     *
     * @return void
     */
    public function setDatabasePassword($databasePassword)
    {
        $this->databasePassword = $databasePassword;
    }
    
    /**
     * Gets the database host.
     *
     * @return string
     */
    public function getDatabaseHost()
    {
        return $this->databaseHost;
    }
    
    /**
     * Sets the database host.
     *
     * @param string $databaseHost
     *
     * @return void
     */
    public function setDatabaseHost($databaseHost)
    {
        $this->databaseHost = $databaseHost;
    }
    
    /**
     * Gets the database type.
     *
     * @return string
     */
    public function getDatabaseType()
    {
        return $this->databaseType;
    }
    
    /**
     * Sets the database type.
     *
     * @param string $databaseType
     *
     * @return void
     */
    public function setDatabaseType($databaseType)
    {
        $this->databaseType = $databaseType;
    }
    
    /**
     * Gets the logo.
     *
     * @return File
     */
    public function getLogo()
    {
        return $this->logo;
    }
    
    /**
     * Sets the logo.
     *
     * @param File $logo
     *
     * @return void
     */
    public function setLogo(File $logo)
    {
        $this->logo = $logo;
    }
    
    /**
     * Gets the logo full path.
     *
     * @return string
     */
    public function getLogoFullPath()
    {
        return $this->logoFullPath;
    }
    
    /**
     * Sets the logo full path.
     *
     * @param string $logoFullPath
     *
     * @return void
     */
    public function setLogoFullPath($logoFullPath)
    {
        $this->logoFullPath = $logoFullPath;
    }
    
    /**
     * Gets the logo full path url.
     *
     * @return string
     */
    public function getLogoFullPathUrl()
    {
        return $this->logoFullPathUrl;
    }
    
    /**
     * Sets the logo full path url.
     *
     * @param string $logoFullPathUrl
     *
     * @return void
     */
    public function setLogoFullPathUrl($logoFullPathUrl)
    {
        $this->logoFullPathUrl = $logoFullPathUrl;
    }
    
    /**
     * Gets the logo meta.
     *
     * @return array
     */
    public function getLogoMeta()
    {
        return $this->logoMeta;
    }
    
    /**
     * Sets the logo meta.
     *
     * @param array $logoMeta
     *
     * @return void
     */
    public function setLogoMeta($logoMeta = [])
    {
        $this->logoMeta = $logoMeta;
    }
    
    /**
     * Gets the fav icon.
     *
     * @return File
     */
    public function getFavIcon()
    {
        return $this->favIcon;
    }
    
    /**
     * Sets the fav icon.
     *
     * @param File $favIcon
     *
     * @return void
     */
    public function setFavIcon(File $favIcon)
    {
        $this->favIcon = $favIcon;
    }
    
    /**
     * Gets the fav icon full path.
     *
     * @return string
     */
    public function getFavIconFullPath()
    {
        return $this->favIconFullPath;
    }
    
    /**
     * Sets the fav icon full path.
     *
     * @param string $favIconFullPath
     *
     * @return void
     */
    public function setFavIconFullPath($favIconFullPath)
    {
        $this->favIconFullPath = $favIconFullPath;
    }
    
    /**
     * Gets the fav icon full path url.
     *
     * @return string
     */
    public function getFavIconFullPathUrl()
    {
        return $this->favIconFullPathUrl;
    }
    
    /**
     * Sets the fav icon full path url.
     *
     * @param string $favIconFullPathUrl
     *
     * @return void
     */
    public function setFavIconFullPathUrl($favIconFullPathUrl)
    {
        $this->favIconFullPathUrl = $favIconFullPathUrl;
    }
    
    /**
     * Gets the fav icon meta.
     *
     * @return array
     */
    public function getFavIconMeta()
    {
        return $this->favIconMeta;
    }
    
    /**
     * Sets the fav icon meta.
     *
     * @param array $favIconMeta
     *
     * @return void
     */
    public function setFavIconMeta($favIconMeta = [])
    {
        $this->favIconMeta = $favIconMeta;
    }
    
    /**
     * Gets the allowed locales.
     *
     * @return array
     */
    public function getAllowedLocales()
    {
        return $this->allowedLocales;
    }
    
    /**
     * Sets the allowed locales.
     *
     * @param array $allowedLocales
     *
     * @return void
     */
    public function setAllowedLocales($allowedLocales)
    {
        $this->allowedLocales = $allowedLocales;
    }
    
    /**
     * Gets the parameters csv file.
     *
     * @return File
     */
    public function getParametersCsvFile()
    {
        return $this->parametersCsvFile;
    }
    
    /**
     * Sets the parameters csv file.
     *
     * @param File $parametersCsvFile
     *
     * @return void
     */
    public function setParametersCsvFile(File $parametersCsvFile)
    {
        $this->parametersCsvFile = $parametersCsvFile;
    }
    
    /**
     * Gets the parameters csv file full path.
     *
     * @return string
     */
    public function getParametersCsvFileFullPath()
    {
        return $this->parametersCsvFileFullPath;
    }
    
    /**
     * Sets the parameters csv file full path.
     *
     * @param string $parametersCsvFileFullPath
     *
     * @return void
     */
    public function setParametersCsvFileFullPath($parametersCsvFileFullPath)
    {
        $this->parametersCsvFileFullPath = $parametersCsvFileFullPath;
    }
    
    /**
     * Gets the parameters csv file full path url.
     *
     * @return string
     */
    public function getParametersCsvFileFullPathUrl()
    {
        return $this->parametersCsvFileFullPathUrl;
    }
    
    /**
     * Sets the parameters csv file full path url.
     *
     * @param string $parametersCsvFileFullPathUrl
     *
     * @return void
     */
    public function setParametersCsvFileFullPathUrl($parametersCsvFileFullPathUrl)
    {
        $this->parametersCsvFileFullPathUrl = $parametersCsvFileFullPathUrl;
    }
    
    /**
     * Gets the parameters csv file meta.
     *
     * @return array
     */
    public function getParametersCsvFileMeta()
    {
        return $this->parametersCsvFileMeta;
    }
    
    /**
     * Sets the parameters csv file meta.
     *
     * @param array $parametersCsvFileMeta
     *
     * @return void
     */
    public function setParametersCsvFileMeta($parametersCsvFileMeta = [])
    {
        $this->parametersCsvFileMeta = $parametersCsvFileMeta;
    }
    
    /**
     * Gets the parameters array.
     *
     * @return array
     */
    public function getParametersArray()
    {
        return $this->parametersArray;
    }
    
    /**
     * Sets the parameters array.
     *
     * @param array $parametersArray
     *
     * @return void
     */
    public function setParametersArray($parametersArray)
    {
        $this->parametersArray = $parametersArray;
    }
    
    /**
     * Gets the active.
     *
     * @return boolean
     */
    public function getActive()
    {
        return $this->active;
    }
    
    /**
     * Sets the active.
     *
     * @param boolean $active
     *
     * @return void
     */
    public function setActive($active)
    {
        if ($active !== $this->active) {
            $this->active = (bool)$active;
        }
    }
    
    /**
     * Gets the created user id.
     *
     * @return integer
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Sets the created user id.
     *
     * @param integer $createdUserId
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Gets the updated user id.
     *
     * @return integer
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Sets the updated user id.
     *
     * @param integer $updatedUserId
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Gets the created date.
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Sets the created date.
     *
     * @param \DateTime $createdDate
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Gets the updated date.
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Sets the updated date.
     *
     * @param \DateTime $updatedDate
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    /**
     * Gets the template.
     *
     * @return \Zikula\MultisitesModule\Entity\TemplateEntity
     */
    public function getTemplate()
    {
        return $this->template;
    }
    
    /**
     * Sets the template.
     *
     * @param \Zikula\MultisitesModule\Entity\TemplateEntity $template
     *
     * @return void
     */
    public function setTemplate(\Zikula\MultisitesModule\Entity\TemplateEntity $template = null)
    {
        $this->template = $template;
    }
    
    /**
     * Gets the project.
     *
     * @return \Zikula\MultisitesModule\Entity\ProjectEntity
     */
    public function getProject()
    {
        return $this->project;
    }
    
    /**
     * Sets the project.
     *
     * @param \Zikula\MultisitesModule\Entity\ProjectEntity $project
     *
     * @return void
     */
    public function setProject(\Zikula\MultisitesModule\Entity\ProjectEntity $project = null)
    {
        $this->project = $project;
    }
    
    /**
     * Gets the extensions.
     *
     * @return \Zikula\MultisitesModule\Entity\SiteExtensionEntity[]
     */
    public function getExtensions()
    {
        return $this->extensions;
    }
    
    /**
     * Sets the extensions.
     *
     * @param \Zikula\MultisitesModule\Entity\SiteExtensionEntity[] $extensions
     *
     * @return void
     */
    public function setExtensions($extensions)
    {
        foreach ($extensions as $siteExtensionSingle) {
            $this->addExtensions($siteExtensionSingle);
        }
    }
    
    /**
     * Adds an instance of \Zikula\MultisitesModule\Entity\SiteExtensionEntity to the list of extensions.
     *
     * @param \Zikula\MultisitesModule\Entity\SiteExtensionEntity $siteExtension The instance to be added to the collection
     *
     * @return void
     */
    public function addExtensions(\Zikula\MultisitesModule\Entity\SiteExtensionEntity $siteExtension)
    {
        $this->extensions->add($siteExtension);
        $siteExtension->setSite($this);
    }
    
    /**
     * Removes an instance of \Zikula\MultisitesModule\Entity\SiteExtensionEntity from the list of extensions.
     *
     * @param \Zikula\MultisitesModule\Entity\SiteExtensionEntity $siteExtension The instance to be removed from the collection
     *
     * @return void
     */
    public function removeExtensions(\Zikula\MultisitesModule\Entity\SiteExtensionEntity $siteExtension)
    {
        $this->extensions->removeElement($siteExtension);
        $siteExtension->setSite(null);
    }
    
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $serviceManager = ServiceUtil::getManager();
        $listHelper = $serviceManager->get('zikula_multisites_module.listentries_helper');
    
        $formattedTitle = ''
                . $this->getName();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getWorkflowStateAllowedValues()
    {
        $serviceManager = ServiceUtil::getManager();
        $helper = $serviceManager->get('zikula_multisites_module.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForSite();
    
        $allowedValues = [];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record
     *
     * @throws RuntimeException Thrown if retrieving the workflow object fails
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('zikula_multisites_module.workflow_helper');
        
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = [
            'module' => 'ZikulaMultisitesModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName
        ];
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, ['index', 'view', 'display']) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'ZikulaMultisitesModule');
            if (!$result) {
                $flashBag = $serviceManager->get('session')->getFlashBag();
                $flashBag->add('error', $serviceManager->get('translator.default')->__('Error! Could not load the associated workflow.'));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('initial');
    
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('zikula_multisites_module.workflow_helper');
    
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = [
            'module' => 'ZikulaMultisitesModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName
        ];
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return boolean Whether everything is valid or not
     */
    public function validate()
    {
        if ($this->_bypassValidation === true) {
            return true;
        }
    
        // decode possibly encoded mail addresses (#201)
        if (strpos($this['siteAdminEmail'], '&#') !== false) {
            $this['siteAdminEmail'] = html_entity_decode($this['siteAdminEmail']);
        }
        $serviceManager = ServiceUtil::getManager();
    
        $validator = $serviceManager->get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $flashBag = $serviceManager->get('session')->getFlashBag();
            foreach ($errors as $error) {
                $flashBag->add('error', $error->getMessage());
            }
    
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'zikulamultisitesmodule.ui_hooks.sites';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return $this->getId();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // reset Workflow
            $this->resetWorkflow();
    
            // reset upload fields
            $this->setLogo('');
            $this->setLogoMeta([]);
            $this->setFavIcon('');
            $this->setFavIconMeta([]);
            $this->setParametersCsvFile('');
            $this->setParametersCsvFileMeta([]);
    
            $this->setCreatedDate(null);
            $this->setCreatedUserId(null);
            $this->setUpdatedDate(null);
            $this->setUpdatedUserId(null);
    
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
