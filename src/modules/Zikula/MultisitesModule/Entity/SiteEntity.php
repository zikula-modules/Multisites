<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Entity;

use Zikula\MultisitesModule\Entity\Base\AbstractSiteEntity as BaseAbstractSiteEntity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;
use Symfony\Component\Validator\Constraints as Assert;
use FormUtil;
use ServiceUtil;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for site entities.
 * @ORM\Entity(repositoryClass="\Zikula\MultisitesModule\Entity\Repository\Site")
 * @ORM\Table(name="zikula_multisites_site",
 *     indexes={
*         @ORM\Index(name="sitednsindex", columns={"siteDns"}),
*         @ORM\Index(name="workflowstateindex", columns={"workflowState"})
 *     }
 * )
* @ORM\HasLifecycleCallbacks
 */
class SiteEntity extends BaseAbstractSiteEntity
{
    // feel free to add your own methods here

    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     *
     * @ORM\PostLoad
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPostLoadCallback()
     * @return void.
     */
    public function postLoadCallback()
    {
        $this->performPostLoadCallback();
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     *
     * @ORM\PrePersist
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPrePersistCallback()
     * @return void.
     */
    public function prePersistCallback()
    {
        $this->performPrePersistCallback();
    }
    
    /**
     * Post-Process the data after an insert operation.
     *
     * @ORM\PostPersist
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPostPersistCallback()
     * @return void.
     */
    public function postPersistCallback()
    {
        $this->performPostPersistCallback();
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     *
     * @ORM\PreRemove
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPreRemoveCallback()
     * @return void.
     */
    public function preRemoveCallback()
    {
        $this->performPreRemoveCallback();
    }
    
    /**
     * Post-Process the data after a delete.
     *
     * @ORM\PostRemove
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPostRemoveCallback()
     * @return void
     */
    public function postRemoveCallback()
    {
        $this->performPostRemoveCallback();

        
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     *
     * @ORM\PreUpdate
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPreUpdateCallback()
     * @return void.
     */
    public function preUpdateCallback()
    {
        $this->performPreUpdateCallback();
    }
    
    /**
     * Post-Process the data after an update operation.
     *
     * @ORM\PostUpdate
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPostUpdateCallback()
     * @return void.
     */
    public function postUpdateCallback()
    {
        $this->performPostUpdateCallback();
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPreSaveCallback()
     * @return void.
     */
    public function preSaveCallback()
    {
        $this->performPreSaveCallback();
    }
    
    /**
     * Post-Process the data after a save operation.
     *
     * @ORM\PostPersist
     * @ORM\PostUpdate
     * @see Zikula\MultisitesModule\Entity\SiteEntity::performPostSaveCallback()
     * @return void.
     */
    public function postSaveCallback()
    {
        $this->performPostSaveCallback();
    }

    /**
     * Retrieves database information array.
     *
     * @return array List of database parameters.
     */
    public function getDatabaseData()
    {
        $dbInfo = [
            'alias' => $this->getSiteAlias(),
            'dbname' => $this->getDatabaseName(),
            'dbhost' => $this->getDatabaseHost(),
            'dbtype' => $this->getDatabaseType(),
            'dbuname' => $this->getDatabaseUserName(),
            'dbpass' => $this->getDatabasePassword()
        ];

        return $dbInfo;
    }

    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see Zikula\MultisitesModule\Entity\SiteEntity::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $systemHelper = $serviceManager->get('zikula_multisites_module.system_helper');
        $session = $serviceManager->get('session');

        // update db config adding the new database
        if (!$systemHelper->updateDatabaseConfigFile()) {
            $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error! Updating the database configuration file failed.'));

            return false;
        }

        // save the site module into the Multisites database
        $extensionHelper = $serviceManager->get('zikula_multisites_module.siteextension_helper');
        if (!$extensionHelper->saveSiteModulesIntoOwnDb($this)) {
            $session = $serviceManager->get('session');
            $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error! Storing the site modules in the Multisites database failed.'));

            return false;
        }

        return parent::performPostPersistCallback();
    }

    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see Zikula\MultisitesModule\Entity\SiteEntity::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $systemHelper = $serviceManager->get('zikula_multisites_module.system_helper');

        // update db config adding the new database
        if (!$systemHelper->updateDatabaseConfigFile()) {
            $session = $serviceManager->get('session');
            $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error! Updating the database configuration file failed.'));

            return false;
        }

        return parent::performPostUpdateCallback();
    }

    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see Zikula\MultisitesModule\Entity\SiteEntity::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        $deleteDatabase = FormUtil::getPassedValue('deleteDatabase', 0, 'POST', FILTER_VALIDATE_BOOLEAN);
        $deleteFiles = FormUtil::getPassedValue('deleteFiles', 0, 'POST', FILTER_VALIDATE_BOOLEAN);

        $serviceManager = ServiceUtil::getManager();
        $systemHelper = $serviceManager->get('zikula_multisites_module.system_helper');
        $session = $serviceManager->get('session');

        if ($deleteDatabase == 1) {
            // delete the database
            if (!$systemHelper->deleteDatabase($this->getDatabaseData())) {
                $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error during deleting the database.'));
            }
        }
        if ($deleteFiles == 1) {
            // delete the site files and directories
            $msConfig = $serviceManager->getParameter('multisites');
            $siteFolder = $msConfig['files_real_path'] . '/' . $this->getSiteAlias();
            if (!$systemHelper->deleteDir($siteFolder)) {
                $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error during deleting the site files directory.'));
            }
        }

        return parent::performPreRemoveCallback();
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see Zikula\MultisitesModule\Entity\SiteEntity::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $systemHelper = $serviceManager->get('zikula_multisites_module.system_helper');

        // update db config removing the database
        if (!$systemHelper->updateDatabaseConfigFile()) {
            $session = $serviceManager->get('session');
            $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error! Updating the database configuration file failed.'));
        }

        return parent::performPostRemoveCallback();
    }

    protected function isFunctionAllowed($func)
    {
        if (ini_get('safe_mode')) {
            return false;
        }
        $disabled = ini_get('disable_functions');
        if ($disabled) {
            $disabled = explode(',', $disabled);
            $disabled = array_map('trim', $disabled);

            return !in_array($func, $disabled);
        }

        return true;
    }

    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }

        $serviceManager = ServiceUtil::getManager();
        $translator = $serviceManager->get('translator.default');

        parent::prepareItemActions();

        $deleteAction = null;

        foreach ($this->_actions as $k => $v) {
            if ($v['linkText'] == $translator->__('Create site extension')) {
                unset($this->_actions[$k]);
            } elseif ($v['linkText'] == $translator->__('Delete')) {
                $deleteAction = $this->_actions[$k];
                unset($this->_actions[$k]);
            }
        }

        $this->_actions[] = [
            'url' => ['type' => 'site', 'func' => 'manageExtensions', 'arguments' => ['id' => $this['id']]],
            'icon' => 'cubes',
            'linkTitle' => $translator->__('Manage the modules for this site'),
            'linkText' => $translator->__('Allowed extensions')
        ];

        $this->_actions[] = [
            'url' => ['type' => 'site', 'func' => 'manageThemes', 'arguments' => ['id' => $this['id']]],
            'icon' => 'paint-brush',
            'linkTitle' => $translator->__('Manage the themes for this site'),
            'linkText' => $translator->__('Allowed layouts')
        ];

        // check if system() is allowed
        if (in_array($this['databaseType'], ['mysql', 'mysqli']) && $this->isFunctionAllowed('system')) {
            $this->_actions[] = [
                'url' => ['type' => 'site', 'func' => 'exportDatabaseAsTemplate', 'arguments' => ['id' => $this['id']]],
                'icon' => 'file-o',
                'linkTitle' => $translator->__('Export the database as SQL file'),
                'linkText' => $translator->__('Database SQL Export')
            ];
        }

        $this->_actions[] = [
            'url' => ['type' => 'site', 'func' => 'viewTools', 'arguments' => ['id' => $this['id']]],
            'icon' => 'briefcase',
            'linkTitle' => $translator->__('Site tools'),
            'linkText' => $translator->__('Site tools')
        ];

        // readd delete action
        if (null !== $deleteAction) {
            $this->_actions[] = $deleteAction;
        }
    }
}
