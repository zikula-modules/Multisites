<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Entity\Repository;

use Zikula\MultisitesModule\Entity\Repository\Base\AbstractSiteRepository;

use Doctrine\ORM\QueryBuilder;
use ServiceUtil;
use Zikula\MultisitesModule\Entity\SiteEntity;
use Zikula\MultisitesModule\Helper\ImageHelper;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for site entities.
 */
class SiteRepository extends AbstractSiteRepository
{
    /**
     * Selects the site fitting to a given siteDNS.
     *
     * @param string $siteDns The given siteDNS value.
     *
     * @return SiteEntity|null
     */
    public function getSiteInfo($siteDns)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('tbl')
            ->from('Zikula\MultisitesModule\Entity\SiteEntity', 'tbl')
            ->where('tbl.siteDns = :siteDns')
            ->setParameter('siteDns', $siteDns);
 
        $query = $qb->getQuery();
        $query->setMaxResults(1);
        $result = $query->getResult();

        return $result;
    }

    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced.
     * @param array        $parameters List of determined filter options.
     *
     * @return QueryBuilder Enriched query builder instance.
     */
    protected function applyDefaultFilters(QueryBuilder $qb, $parameters = array())
    {
        $qb = parent::applyDefaultFilters($qb, $parameters);

        $letter = $this->request->query->getAlnum('letter', '');
        if ($letter != '') {
            $qb->andWhere('tbl.name LIKE :letter')
               ->setParameter('letter', $letter . '%');
        }

        return $qb;
    }

    /**
     * Returns an array of additional template variables which are specific to the object type treated by this repository.
     *
     * @param ImageHelper $imageHelper ImageHelper service instance
     * @param string      $context     Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array       $args        Additional arguments
     *
     * @return array List of template variables to be assigned.
     */
    public function getAdditionalTemplateParameters(ImageHelper $imageHelper, $context = '', $args = array())
    {
        $parameters = parent::getAdditionalTemplateParameters($imageHelper, $context, $args);

        if ($context == 'controllerAction' && $args['action'] == 'view') {
            $serviceManager = ServiceUtil::getManager();
            $msConfig = $serviceManager->getParameter('multisites');
            $parameters['wwwroot'] = $msConfig['wwwroot'];
            $parameters['basedOnDomains'] = $msConfig['based_on_domains'];
        }

        return $parameters;
    }

    /**
     * Helper method to add join selections.
     *
     * @return String Enhancement for select clause.
     */
    protected function addJoinsToSelection()
    {
        $selection = ', tblTemplate, tblProject';//, tblExtensions';
    
        return $selection;
    }
    
    /**
     * Helper method to add joins to from clause.
     *
     * @param QueryBuilder $qb query builder instance used to create the query.
     *
     * @return String Enhancement for from clause.
     */
    protected function addJoinsToFrom(QueryBuilder $qb)
    {
        $qb->leftJoin('tbl.template', 'tblTemplate');
        $qb->leftJoin('tbl.project', 'tblProject');
        //$qb->leftJoin('tbl.extensions', 'tblExtensions');
    
        return $qb;
    }
}
