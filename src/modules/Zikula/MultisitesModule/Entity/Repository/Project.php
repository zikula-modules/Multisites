<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Entity\Repository;

use Zikula\MultisitesModule\Entity\Repository\Base\AbstractProject;

use Doctrine\ORM\QueryBuilder;
use ModUtil;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for project entities.
 */
class Project extends AbstractProject
{
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType).
     * @param array  $args    Additional arguments.
     *
     * @return array List of template variables to be assigned.
     */
    protected function getViewQuickNavParameters($context = '', $args = array())
    {
        $parameters = parent::getViewQuickNavParameters($context, $args);

        $parameters['templates'] = $this->request->query->getDigits('templates', 0);

        return $parameters;
    }

    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced.
     *
     * @return QueryBuilder Enriched query builder instance.
     */
    public function addCommonViewFilters(QueryBuilder $qb)
    {
        $currentFunc = $this->request->query->getAlpha('func', 'index');
        if ($currentFunc == 'edit') {
            return $qb;
        }

        $parameters = $this->getViewQuickNavParameters('', array());
        foreach ($parameters as $k => $v) {
            if ($k == 'templates') {
                if ($v > 0 && strpos($qb->getDql(), 'tblTemplates') !== false) {
                    $qb->andWhere(':templates MEMBER OF tbl.templates')
                       ->setParameter('templates', $v);
                }
            } elseif (in_array($k, array('q', 'searchterm'))) {
                // quick search
                if (!empty($v)) {
                    $qb = $this->addSearchFilter($qb, $v);
                }
            } else if (!is_array($v)) {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFilters($qb, $parameters);

        return $qb;
    }

    /**
     * Helper method to add join selections.
     *
     * @return String Enhancement for select clause.
     */
    protected function addJoinsToSelection()
    {
        $selection = ', tblTemplates';//', tblSites, tblTemplates';
    
        return $selection;
    }
    
    /**
     * Helper method to add joins to from clause.
     *
     * @param QueryBuilder $qb query builder instance used to create the query.
     *
     * @return String Enhancement for from clause.
     */
    protected function addJoinsToFrom(QueryBuilder $qb)
    {
        //$qb->leftJoin('tbl.sites', 'tblSites');
        $qb->leftJoin('tbl.templates', 'tblTemplates');
    
        return $qb;
    }
}
