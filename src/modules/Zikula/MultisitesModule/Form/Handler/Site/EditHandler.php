<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Form\Handler\Site;

use Zikula\MultisitesModule\Form\Handler\Site\Base\EditHandler as BaseEditHandler;

use System;
use Zikula\MultisitesModule\Entity\SiteEntity;
use Zikula\MultisitesModule\Helper\SystemHelper;

/**
 * This handler class handles the page events of the Form called by the zikulaMultisitesModule_site_edit() function.
 * It aims on the site object type.
 */
class EditHandler extends BaseEditHandler
{
    /**
     * Configuration application helper.
     * @var SystemHelper
     */
    private $systemHelper;

    /**
     * Input data processing called by handleCommand method.
     *
     * @param array $args Additional arguments.
     *
     * @return array form data after processing.
     */
    public function fetchInputData(&$args)
    {
        $isDecoupledSite = is_null($this->entityRef['template']);

        $formData = parent::fetchInputData($args);

        // get treated entity reference from persisted member var
        $entity = $this->entityRef;

        $flashBag = $this->request->getSession()->getFlashBag();

        if (!ctype_lower($entity['siteAlias'])) {
            $flashBag->add('error', $this->__('Error! The site alias may contain only lowercase letters.'));
            return false;
        }

        if (!System::varValidate($entity['siteAdminName'], 'uname')) {
            $flashBag->add('error', $this->__('The user name you entered for the site administrator contains unacceptable characters. A valid user name consists of lowercase letters, numbers, underscores, periods, and/or dashes.'));
            return false;
        }

        if (!is_null($entity['template']) && count($entity['template']['parameters']) > 0) {
            // check if parameters have been provided
            if (!$entity['parametersCsvFile'] && (is_null($entity['parametersArray']) || !count($entity['parametersArray']))) {
                $flashBag->add('error', $this->__('Error! Please either provide a csv file containing the required parameter values or enter them manually.'));
                return false;
            }
        }

        // create helper instance for config application
        $this->systemHelper = $this->container->get('zikula_multisites_module.system_helper');

        if ($this->templateParameters['mode'] == 'create') {
            if (is_null($entity['template'])) {
                $flashBag->add('error', $this->__('Error! You need to select a template for new sites.'));
                return false;
            }

            $createNewDatabase = isset($formData['additions']) && is_array($formData['additions']) && isset($formData['additions']['createNewDatabase']) && $formData['additions']['createNewDatabase'] == 1;
            if (!$this->prepareNewSite($entity, $createNewDatabase)) {
                return false; // error has been registered already
            }
        } else {
            // check if database connection works
            $connect = $this->systemHelper->connectToExternalDatabase($entity->getDatabaseData());
            if (!$connect) {
                $flashBag->add('error', $this->__('Error! Connecting to the database failed.'));
                return false;
            }
        }

        if ($this->templateParameters['mode'] != 'create') {
            // check if site has been decoupled from it's template
            $templateIdArray = isset($formData['template']) && is_array($formData['template']) ? $formData['template'] : [];
            if (isset($templateIdArray[0])) {
                if (!$isDecoupledSite && $templateIdArray[0] == '') {
                    // decouple site

                    // remove template assignment from site
                    $entity->setTemplate(null);

                    // save entity reference for later reuse
                    $this->entityRef = $entity;
                } elseif (!is_null($entity['template'])) {
                    // couple again

                    // insert database content
                    if (!$this->systemHelper->setupDatabaseContent($entity)) {
                        return false; // error has been registered already
                    }
                }
            }
        }

        return $formData;
    }

    /**
     * Performs preparation work and advanced checks before a new site is persisted.
     *
     * @param SiteEntity $entity            The currently treated site instance.
     * @param boolean    $createNewDatabase If true then the database is created, defaults to false.
     *
     * @return boolean True on success or false otherwise.
     */
    protected function prepareNewSite($entity, $createNewDatabase = false)
    {
        $flashBag = $this->request->getSession()->getFlashBag();

        $siteFactory = $this->container->get('zikula_multisites_module.site_factory');
        // check whether the sitedns already exists and return an error it this is the case
        $repository = $siteFactory->getRepository();
        $sites = $repository->getSiteInfo($entity['siteDns']);
        if (!is_null($sites) && count($sites) > 0) {
            $flashBag->add('error', $this->__('This site exists already. The site DNS must be unique.'));
            return false;
        }

        // perform also a duplicate check for the alias
        $where = 'tbl.siteAlias = \'' . $entity['siteAlias'] . '\'';
        $sites = $repository->selectWhere($where, '', false);
        if (!is_null($sites) && count($sites) > 0) {
            $flashBag->add('error', $this->__('This site exists already. The site alias must be unique.'));
            return false;
        }

        // perform some preparation work for the new site

        // create initial folders for the new site
        if (!$this->systemHelper->createSiteFolders($entity)) {
            return false; // error has been registered already
        }

        // check if database connection works
        $connect = $this->systemHelper->connectToExternalDatabase($entity->getDatabaseData());
        if (!$connect) {
            $flashBag->add('error', $this->__('Error! Connecting to the database failed.'));
            return false;
        }

        if ($createNewDatabase) {
            // create a new database if it does not exist yet
            if (!$this->systemHelper->createDatabase($entity->getDatabaseData())) {
                $flashBag->add('error', $this->__('Error! Creation of database failed.'));
                return false;
            }
        }

        // insert database content
        if (!$this->systemHelper->setupDatabaseContent($entity)) {
            return false; // error has been registered already
        }

        // create .htaccess file
        if (!$this->systemHelper->createHtAccessForTempFolder($entity)) {
            return false; // error has been registered already
        }

        return true;
    }
}
