<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link https://modulestudio.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.0.1 (https://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Menu;

use Knp\Menu\FactoryInterface;
use Zikula\MultisitesModule\Entity\SiteEntity;
use Zikula\MultisitesModule\Entity\TemplateEntity;
use Zikula\MultisitesModule\Menu\Base\AbstractItemActionsMenu;

/**
 * This is the item actions menu implementation class.
 */
class ItemActionsMenu extends AbstractItemActionsMenu
{
    /**
     * @inheritDoc
     */
    public function menu(FactoryInterface $factory, array $options)
    {
        $menu = parent::menu($factory, $options);

        if ($entity instanceof TemplateEntity) {
            $menu->removeChild($this->__('Create project'));

            $title = $this->__('Parameters CSV');
            $menu->addChild($title, [
                'route' => 'zikulamultisitesmodule_template_createparameterscsvtemplate',
                'routeParameters' => ['id' => $entity->getKey()]
            ])->setAttribute('icon', 'fa fa-file-o');
            $menu[$title]->setLinkAttribute('title', $this->__('Create a CSV file for the defined parameters'));

            $title = $this->__('Reapply template');
            $menu->addChild($title, [
                'route' => 'zikulamultisitesmodule_template_reapply',
                'routeParameters' => ['id' => $entity->getKey()]
            ])->setAttribute('icon', 'fa fa-file-o');
            $menu[$title]->setLinkAttribute('title', $this->__('Reapply template to all assigned sites'));
        } elseif ($entity instanceof SiteEntity) {
            $menu->removeChild($this->__('Create site extension'));

            $deleteAction = null;
            $deleteTitle = $this->__('Delete');
            if (isset($menu->children[$deleteTitle])) {
                $deleteAction = $menu->getChild($deleteTitle);
                $menu->removeChild($deleteTitle);
            }

            $title = $this->__('Allowed extensions');
            $menu->addChild($title, [
                'route' => 'zikulamultisitesmodule_site_manageextensions',
                'routeParameters' => ['id' => $entity->getKey()]
            ])->setAttribute('icon', 'fa fa-cubes');
            $menu[$title]->setLinkAttribute('title', $this->__('Manage the modules for this site'));

            $title = $this->__('Allowed layouts');
            $menu->addChild($title, [
                'route' => 'zikulamultisitesmodule_site_managethemes',
                'routeParameters' => ['id' => $entity->getKey()]
            ])->setAttribute('icon', 'fa fa-paint-brush');
            $menu[$title]->setLinkAttribute('title', $this->__('Manage the themes for this site'));

            // check if system() is allowed
            if (false !== strpos($this->container->getParameter('doctrine.dbal.driver'), 'mysql') && $this->isFunctionAllowed('system')) {
                $title = $this->__('Database SQL Export');
                $menu->addChild($title, [
                    'route' => 'zikulamultisitesmodule_site_exportdatabaseastemplate',
                    'routeParameters' => ['id' => $entity->getKey()]
                ])->setAttribute('icon', 'fa fa-file-o');
                $menu[$title]->setLinkAttribute('title', $this->__('Export the database as SQL file'));
            }

            $title = $this->__('Site tools');
            $menu->addChild($title, [
                'route' => 'zikulamultisitesmodule_site_viewtools',
                'routeParameters' => ['id' => $entity->getKey()]
            ])->setAttribute('icon', 'fa fa-briefcase');
            $menu[$title]->setLinkAttribute('title', $title);

            // readd delete action
            if (null !== $deleteAction) {
                $menu->addChild($deleteAction);
            }
        }

        return $menu;
    }

    /**
     * Checks whether a certain PHP function is allowed or not.
     *
     * @param string $func Name of function
     *
     * @return boolean true if function is allowed, false otherwise
     */
    protected function isFunctionAllowed($func)
    {
        if (ini_get('safe_mode')) {
            return false;
        }
        $disabled = ini_get('disable_functions');
        if ($disabled) {
            $disabled = explode(',', $disabled);
            $disabled = array_map('trim', $disabled);

            return !in_array($func, $disabled);
        }

        return true;
    }
}
