<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.0.1 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Helper;

use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Zikula\Bundle\CoreBundle\CacheClearer;
use Zikula\Bundle\CoreBundle\DynamicConfigDumper;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\ExtensionsModule\ExtensionVariablesTrait;

/**
 * Utility class for configuration related functionality.
 */
class ConfiguratorHelper
{
    use ExtensionVariablesTrait;
    use TranslatorTrait;

    /**
     * The current request.
     *
     * @var Request
     */
    protected $request = null;

    /**
     * @var SessionInterface
     */
    protected $session;

    /**
     * Config dumper.
     *
     * @var DynamicConfigDumper
     */
    protected $configDumper = null;

    /**
     * Cache clearer.
     *
     * @var CacheClearer
     */
    protected $cacheClearer = null;

    /**
     * @var array
     */
    private $multisitesParameters;

    /**
     * Subsites configuration file.
     *
     * @var string
     */
    private $subsitesConfigFile;

    /**
     * List of template parameters.
     *
     * @var array
     */
    private $templateParameters = [];

    /**
     * Constructor.
     * Initialises member vars.
     *
     * @param TranslatorInterface  $translator           Translator service instance
     * @param RequestStack         $requestStack         RequestStack service instance
     * @param SessionInterface     $session              Session service instance
     * @param VariableApiInterface $variableApi          VariableApi service instance
     * @param DynamicConfigDumper  $configDumper         DynamicConfigDumper service instance
     * @param CacheClearer         $cacheClearer         CacheClearer service instance
     * @param array                $multisitesParameters Multisites parameters array
     */
    public function __construct(
        TranslatorInterface $translator,
        RequestStack $requestStack,
        SessionInterface $session,
        VariableApiInterface $variableApi,
        DynamicConfigDumper $configDumper,
        CacheClearer $cacheClearer,
        array $multisitesParameters
    ) {
        $this->setTranslator($translator);
        $this->request = $requestStack->getCurrentRequest();
        $this->session = $session;
        $this->variableApi = $variableApi;
        $this->configDumper = $configDumper;
        $this->cacheClearer = $cacheClearer;
        $this->multisitesParameters = $multisitesParameters;

        $this->subsitesConfigFile = 'var/multisites.json';
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * Checks whether Multisites configuration is existing and well-formed.
     *
     * @return boolean indicating if everything is okay
     */
    public function verify()
    {
        $this->templateParameters = [];
        $fs = new Filesystem();

        if (!$this->isMultisitesEnabled()) {
            $postData = $this->request->request;

            // define multisites system parameters
            $mainSiteUrl = $this->getVar('mainsiteurl', '');
            if (empty($mainSiteUrl)) {
                $paramsValid = false;
                $mainSiteUrl = $postData->get('mainsiteurl', null);
                if (null !== $mainSiteUrl) {
                    // values are sent via POST, try to save them
                    if ($this->writeSystemParametersToConfig($mainSiteUrl)) {
                        if ($this->createAdditionalDirectories()) {
                            // save parameters in modvars temporarily
                            $this->setVar('mainsiteurl', $mainSiteUrl);
                            $paramsValid = true;
                        }
                    }
                }

                if (true !== $paramsValid) {
                    // ask for multisites system parameters

                    $this->templateParameters = [
                        'step' => 2,
                        'mainSiteUrl' => $this->request->server->get('HTTP_HOST')
                    ];

                    return false;
                }
            }

            $this->session->getFlashBag()->add('error', $this->__('Error: it seems everything is configured correctly, but Multisites is not running. Please check your configuration file!'));

            return false;
        }

        // Multisites is enabled

        // cleanup
        $this->delVar('mainsiteurl');

        return true;
    }

    /**
     * Returns the collected template parameters.
     *
     * @return array List of template parameters
     */
    public function getTemplateParameters()
    {
        return $this->templateParameters;
    }

    /**
     * Checks whether the Multisites system is enabled or not.
     *
     * @return boolean True if Multisites is active, false otherwise
     */
    private function isMultisitesEnabled()
    {
        return true == $this->multisitesParameters['enabled'];
    }

    /**
     * Writes multisites system parameters into the app/config/dynamic/generated.yml file.
     *
     * @param string $mainSiteUrl Domain for the main site
     *
     * @return boolean True if everything worked, false otherwise
     */
    private function writeSystemParametersToConfig($mainSiteUrl)
    {
        // get server zikula folder installation
        /** TODO: write rule to convert domains from www.foo.dom to foo.dom */
        $pathToThisFile = $this->request->server->get('SCRIPT_FILENAME');
        $scriptRealPath = substr($pathToThisFile, 0, strrpos($pathToThisFile, '/'));
        $basePath = substr($scriptRealPath, 0, strrpos($scriptRealPath, '/'));

        $flashBag = $this->session->getFlashBag();

        // write parameters into app/config/dynamic/generated.yml
        $parameters = $this->configDumper->getParameters();
        $parameters['multisites']['enabled'] = true;
        $parameters['multisites']['mainsiteurl'] = $mainSiteUrl;
        $parameters['multisites']['based_on_domains'] = 1; // TODO
        $parameters['multisites']['protected.systemvars'] = []; // TODO
        $this->configDumper->setParameters($parameters);
        $this->cacheClearer->clear('symfony');

        return true;
    }

    /**
     * Writes multisites system parameters into the config/multisites_config.php file.
     *
     * @return boolean True if everything worked, false otherwise
     */
    private function createAdditionalDirectories()
    {
        $flashBag = $this->session->getFlashBag();

        // TODO update to new structure
        /*
        // check if the sites files directory exists
        $path = $this->getVar('files_real_path', '');
        if ($path == '') {
            $flashBag->add('error', $this->__('The directory for storing the sites files is not defined. Check your configuration values.'));

            return false;
        }

        $fs = new Filesystem();
        if (!$fs->exists($path)) {
            $flashBag->add('error', $this->__('The directory for storing the sites files does not exist.'));

            return false;
        }
        // check if the sites files directory is writeable
        if (!is_writeable($path)) {
            $flashBag->add('error', $this->__('The directory for storing the sites files is not writeable.'));

            return false;
        }

        // create the main site folder
        /*
        $path .= '/' . $this->request->query->get('sitedns', null);
        if (!$fs->exists($path)) {
            $fs->mkdir($path, 0777);
            if (!$fs->exists($path)) {
                $flashBag->add('error', $this->__('Error creating the directory:') . ' ' . $path);

                return false;
            }
        }* /
        */

        return true;
    }
}
