<?php
/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @link http://modulestudio.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Helper\Base;

use DataUtil;
use FileUtil;
use Monolog\Logger;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Symfony\Component\HttpFoundation\Session\Session;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula_Request_Http;

/**
 * Utility base class for controller helper methods.
 */
class ControllerHelper
{
    /**
     * @var ContainerBuilder
     */
    protected $container;

    /**
     * @var TranslatorInterface
     */
    protected $translator;

    /**
     * @var Session
     */
    protected $session;

    /**
     * @var Logger
     */
    protected $logger;

    /**
     * Constructor.
     * Initialises member vars.
     *
     * @param \Zikula_ServiceManager $serviceManager ServiceManager instance.
     * @param TranslatorInterface    $translator     Translator service instance.
     * @param Session                $session        Session service instance.
     * @param Logger                 $logger         Logger service instance.
     *
     * @return void
     */
    public function __construct(\Zikula_ServiceManager $serviceManager, TranslatorInterface $translator, Session $session, Logger $logger)
    {
        $this->container = $serviceManager;
        $this->translator = $translator;
        $this->session = $session;
        $this->logger = $logger;
    }

    /**
     * Returns an array of all allowed object types in ZikulaMultisitesModule.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, helper, actionHandler, block, contentType, util).
     * @param array  $args    Additional arguments.
     *
     * @return array List of allowed object types.
     */
    public function getObjectTypes($context = '', $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'helper', 'actionHandler', 'block', 'contentType', 'util'])) {
            $context = 'controllerAction';
        }
    
        $allowedObjectTypes = [];
        $allowedObjectTypes[] = 'site';
        $allowedObjectTypes[] = 'template';
        $allowedObjectTypes[] = 'siteExtension';
        $allowedObjectTypes[] = 'project';
    
        return $allowedObjectTypes;
    }

    /**
     * Returns the default object type in ZikulaMultisitesModule.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, helper, actionHandler, block, contentType, util).
     * @param array  $args    Additional arguments.
     *
     * @return string The name of the default object type.
     */
    public function getDefaultObjectType($context = '', $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'helper', 'actionHandler', 'block', 'contentType', 'util'])) {
            $context = 'controllerAction';
        }
    
        $defaultObjectType = 'site';
    
        return $defaultObjectType;
    }

    /**
     * Checks whether a certain entity type uses composite keys or not.
     *
     * @param string $objectType The object type to retrieve.
     *
     * @return boolean Whether composite keys are used or not.
     */
    public function hasCompositeKeys($objectType)
    {
        switch ($objectType) {
            case 'site':
                return false;
            case 'template':
                return false;
            case 'siteExtension':
                return false;
            case 'project':
                return false;
                default:
                    return false;
        }
    }

    /**
     * Retrieve identifier parameters for a given object type.
     *
     * @param Zikula_Request_Http $request    Instance of Zikula_Request_Http.
     * @param array               $args       List of arguments used as fallback if request does not contain a field.
     * @param string              $objectType Name of treated entity type.
     * @param array               $idFields   List of identifier field names.
     *
     * @return array List of fetched identifiers.
     */
    public function retrieveIdentifier(Zikula_Request_Http $request, array $args, $objectType = '', array $idFields)
    {
        $idValues = [];
        $routeParams = $request->get('_route_params', []);
        foreach ($idFields as $idField) {
            $defaultValue = isset($args[$idField]) && is_numeric($args[$idField]) ? $args[$idField] : 0;
            if ($this->hasCompositeKeys($objectType)) {
                // composite key may be alphanumeric
                if (array_key_exists($idField, $routeParams)) {
                    $id = !empty($routeParams[$idField]) ? $routeParams[$idField] : $defaultValue;
                } elseif ($request->query->has($idField)) {
                    $id = $request->query->getAlnum($idField, $defaultValue);
                } else {
                    $id = $defaultValue;
                }
            } else {
                // single identifier
                if (array_key_exists($idField, $routeParams)) {
                    $id = (int) !empty($routeParams[$idField]) ? $routeParams[$idField] : $defaultValue;
                } elseif ($request->query->has($idField)) {
                    $id = $request->query->getInt($idField, $defaultValue);
                } else {
                    $id = $defaultValue;
                }
            }
    
            // fallback if id has not been found yet
            if (!$id && $idField != 'id' && count($idFields) == 1) {
                $defaultValue = isset($args['id']) && is_numeric($args['id']) ? $args['id'] : 0;
                if (array_key_exists('id', $routeParams)) {
                    $id = (int) !empty($routeParams['id']) ? $routeParams['id'] : $defaultValue;
                } elseif ($request->query->has('id')) {
                    $id = (int) $request->query->getInt('id', $defaultValue);
                } else {
                    $id = $defaultValue;
                }
            }
            $idValues[$idField] = $id;
        }
    
        return $idValues;
    }

    /**
     * Checks if all identifiers are set properly.
     *
     * @param array  $idValues List of identifier field values.
     *
     * @return boolean Whether all identifiers are set or not.
     */
    public function isValidIdentifier(array $idValues)
    {
        if (!count($idValues)) {
            return false;
        }
    
        foreach ($idValues as $idField => $idValue) {
            if (!$idValue) {
                return false;
            }
        }
    
        return true;
    }

    /**
     * Create nice permalinks.
     *
     * @param string $name The given object title.
     *
     * @return string processed permalink.
     * @deprecated made obsolete by Doctrine extensions.
     */
    public function formatPermalink($name)
    {
        $name = str_replace(
            ['ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', '.', '?', '"', '/', ':', 'é', 'è', 'â'],
            ['ae', 'oe', 'ue', 'Ae', 'Oe', 'Ue', 'ss', '', '', '', '-', '-', 'e', 'e', 'a'],
            $name
        );
        $name = DataUtil::formatPermalink($name);
    
        return strtolower($name);
    }

    /**
     * Retrieve the base path for given object type and upload field combination.
     *
     * @param string  $objectType   Name of treated entity type.
     * @param string  $fieldName    Name of upload field.
     * @param boolean $ignoreCreate Whether to ignore the creation of upload folders on demand or not.
     *
     * @return mixed Output.
     * @throws Exception if invalid object type is given.
     */
    public function getFileBaseFolder($objectType, $fieldName, $ignoreCreate = false)
    {
        if (!in_array($objectType, $this->getObjectTypes())) {
            throw new Exception('Error! Invalid object type received.');
        }
    
        $basePath = $this->container->getParameter('datadir') . '/ZikulaMultisitesModule/';
    
        switch ($objectType) {
            case 'site':
                $basePath .= 'sites/';
                switch ($fieldName) {
                    case 'logo':
                        $basePath .= 'logo/';
                        break;
                    case 'favIcon':
                        $basePath .= 'favicon/';
                        break;
                    case 'parametersCsvFile':
                        $basePath .= 'parameterscsvfile/';
                        break;
                }
            break;
            case 'template':
                $basePath .= 'templates/sqlfile/';
            break;
        }
    
        $result = $basePath;
        if (substr($result, -1, 1) != '/') {
            // reappend the removed slash
            $result .= '/';
        }
    
        if (!is_dir($result) && !$ignoreCreate) {
            $this->checkAndCreateAllUploadFolders();
        }
    
        return $result;
    }

    /**
     * Creates all required upload folders for this application.
     *
     * @return Boolean whether everything went okay or not.
     */
    public function checkAndCreateAllUploadFolders()
    {
        $result = true;
    
        $result &= $this->checkAndCreateUploadFolder('site', 'logo', 'gif, jpeg, jpg, png');
        $result &= $this->checkAndCreateUploadFolder('site', 'favIcon', 'png, ico');
        $result &= $this->checkAndCreateUploadFolder('site', 'parametersCsvFile', 'csv');
    
        $result &= $this->checkAndCreateUploadFolder('template', 'sqlFile', 'sql, txt');
    
        return $result;
    }

    /**
     * Creates upload folder including a subfolder for thumbnail and an .htaccess file within it.
     *
     * @param string $objectType        Name of treated entity type.
     * @param string $fieldName         Name of upload field.
     * @param string $allowedExtensions String with list of allowed file extensions (separated by ", ").
     *
     * @return Boolean whether everything went okay or not.
     */
    protected function checkAndCreateUploadFolder($objectType, $fieldName, $allowedExtensions = '')
    {
        $uploadPath = $this->getFileBaseFolder($objectType, $fieldName, true);
    
        $fs = new Filesystem();
    
        try {
            // Check if directory exist and try to create it if needed
            if (!$fs->exists($uploadPath) && !$fs->mkdir($uploadPath, 0777)) {
                $this->session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $this->translator->__f('The upload directory "%s" does not exist and could not be created. Try to create it yourself and make sure that this folder is accessible via the web and writable by the webserver.', [$uploadPath]));
                $this->logger->error('{app}: The upload directory {directory} does not exist and could not be created.', ['app' => 'ZikulaMultisitesModule', 'directory' => $uploadPath]);
    
                return false;
            }
    
            // Check if directory is writable and change permissions if needed
            if (!is_writable($uploadPath) && !$fs->chmod($uploadPath, 0777)) {
                $this->session->getFlashBag()->add(\Zikula_Session::MESSAGE_WARNING, $this->translator->__f('Warning! The upload directory at "%s" exists but is not writable by the webserver.', [$uploadPath]));
                $this->logger->error('{app}: The upload directory {directory} exists but is not writable by the webserver.', ['app' => 'ZikulaMultisitesModule', 'directory' => $uploadPath]);
    
                return false;
            }
    
            // Write a htaccess file into the upload directory
            $htaccessFilePath = $uploadPath . '/.htaccess';
            $htaccessFileTemplate = 'modules/ZikulaMultisitesModule/Resources/docs/htaccessTemplate';
            if (!$fs->exists($htaccessFilePath) && $fs->exists($htaccessFileTemplate)) {
                $extensions = str_replace(',', '|', str_replace(' ', '', $allowedExtensions));
                $htaccessContent = str_replace('__EXTENSIONS__', $extensions, file_get_contents($htaccessFileTemplate, false));
                $fs->dumpFile($htaccessFilePath, $htaccessContent);
            }
        } catch (IOExceptionInterface $e) {
            $this->session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $this->translator->__f('An error occured during creation of the .htaccess file in directory "%s".', [$e->getPath()]));
            $this->logger->error('{app}: An error occured during creation of the .htaccess file in directory {directory}.', ['app' => 'ZikulaMultisitesModule', 'directory' => $uploadPath]);
        }
    
        return true;
    }
}
