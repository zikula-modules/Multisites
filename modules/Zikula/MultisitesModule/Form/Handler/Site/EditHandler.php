<?php

/**
 * Multisites.
 *
 * @copyright Albert PÃ©rez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert PÃ©rez Monfort <aperezm@xtec.cat>.
 * @see https://modulestudio.de
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Form\Handler\Site;

use Zikula\MultisitesModule\DatabaseInfo;
use Zikula\MultisitesModule\Entity\SiteEntity;
use Zikula\MultisitesModule\Form\Handler\Site\Base\AbstractEditHandler;
use Zikula\MultisitesModule\Helper\SystemHelper;

/**
 * This handler class handles the page events of editing forms.
 * It aims on the site object type.
 */
class EditHandler extends AbstractEditHandler
{
    /**
     * Configuration application helper.
     *
     * @var SystemHelper
     */
    private $systemHelper;

    /**
     * Sets the system helper.
     *
     * @param SystemHelper $systemHelper
     */
    public function setSystemHelper(SystemHelper $systemHelper)
    {
        $this->systemHelper = $systemHelper;
    }

    /**
     * @inheritDoc
     */
    public function handleCommand(array $args = [])
    {
        // build $args for BC (e.g. used by redirect handling)
        foreach ($this->templateParameters['actions'] as $action) {
            if ($this->form->get($action['id'])->isClicked()) {
                $args['commandName'] = $action['id'];
            }
        }
        if ($this->form->get('cancel')->isClicked()) {
            $args['commandName'] = 'cancel';
        }
    
        $action = $args['commandName'];
        $isRegularAction = !in_array($action, ['delete', 'cancel']);

        if (!$isRegularAction) {
            return parent::handleCommand($args);
        }

        // get treated entity reference from persisted member var
        $entity = $this->entityRef;

        $flashBag = $this->request->getSession()->getFlashBag();

        if (!ctype_lower($entity['siteAlias'])) {
            $flashBag->add('error', $this->__('Error! The site alias may contain only lowercase letters.'));

            return false;
        }

        if (null !== $entity['template'] && count($entity['template']['parameters']) > 0) {
            // check if parameters have been provided
            if (
                !$entity['parametersCsvFile']
                && (
                    null === $entity['parametersArray']
                    || !count($entity['parametersArray'])
                )
            ) {
                $flashBag->add(
                    'error',
                    $this->__('Error! Please either provide a csv file containing the required parameter values or enter them manually.')
                );

                return false;
            }
        }

        if ('create' === $this->templateParameters['mode']) {
            if (null === $entity['template']) {
                $flashBag->add('error', $this->__('Error! You need to select a template for new sites.'));

                return false;
            }

            $createNewDatabase = $this->request->request->has('createNewDatabase')
                && true === $this->request->request->getBoolean('createNewDatabase')
            ;
            if (!$this->prepareNewSite($entity, $createNewDatabase)) {
                return false; // error has been registered already
            }
        } else {
            // check if database connection works
            $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($entity));
            if (!$connect) {
                $flashBag->add('error', $this->__('Error! Connecting to the database failed.'));

                return false;
            }
        }

        if ('create' !== $this->templateParameters['mode']) {
            // check if site has been decoupled from it's template
            $formData = $this->form->getData();
            $templateIdArray = isset($formData['template']) && is_array($formData['template'])
                ? $formData['template']
                : []
            ;
            if (isset($templateIdArray[0])) {
                $isDecoupledSite = null === $entity['template'];
                if (!$isDecoupledSite && '' == $templateIdArray[0]) {
                    // decouple site

                    // remove template assignment from site
                    $entity->setTemplate(null);

                    // save entity reference for later reuse
                    $this->entityRef = $entity;
                } elseif (null !== $entity['template']) {
                    // couple again

                    // insert database content
                    if (!$this->systemHelper->setupDatabaseContent($entity)) {
                        return false; // error has been registered already
                    }
                }
            }
        }

        return parent::handleCommand($args);
    }

    /**
     * Performs preparation work and advanced checks before a new site is persisted.
     *
     * @param SiteEntity $site              The currently treated site instance.
     * @param boolean    $createNewDatabase If true then the database is created, defaults to false.
     *
     * @return boolean True on success or false otherwise.
     */
    protected function prepareNewSite(SiteEntity $site, $createNewDatabase = false)
    {
        $flashBag = $this->request->getSession()->getFlashBag();

        // check whether the sitedns already exists and return an error it this is the case
        $repository = $this->entityFactory->getRepository('site');
        $existingSite = $repository->findOneBy(['siteDns' => $site['siteDns']]);
        if (null !== $existingSite) {
            $flashBag->add('error', $this->__('This site exists already. The site DNS must be unique.'));

            return false;
        }

        // perform also a duplicate check for the alias
        $existingSite = $repository->findOneBy(['siteAlias' => $site['siteAlias']]);
        if (null !== $existingSite) {
            $flashBag->add('error', $this->__('This site exists already. The site alias must be unique.'));

            return false;
        }

        // perform some preparation work for the new site

        // create initial folders for the new site
        if (!$this->systemHelper->createSiteFolders($site)) {
            return false; // error has been registered already
        }

        if ($createNewDatabase) {
            // create a new database if it does not exist yet
            if (!$this->systemHelper->createDatabase(new DatabaseInfo($site))) {
                $flashBag->add('error', $this->__('Error! Creation of database failed.'));

                return false;
            }
        }

        // check if database connection works
        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add('error', $this->__('Error! Connecting to the database failed.'));

            return false;
        }

        // insert database content
        if (!$this->systemHelper->setupDatabaseContent($site)) {
            return false; // error has been registered already
        }

        return true;
    }
}
