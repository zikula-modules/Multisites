<?php

/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @see https://modulestudio.de
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Helper;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Zikula\Bundle\CoreBundle\CacheClearer;
use Zikula\Bundle\CoreBundle\DynamicConfigDumper;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;

/**
 * Utility class for configuration related functionality.
 */
class ConfiguratorHelper
{
    use TranslatorTrait;

    /**
     * The current request.
     *
     * @var Request
     */
    protected $request = null;

    /**
     * @var SessionInterface
     */
    protected $session;

    /**
     * Config dumper.
     *
     * @var DynamicConfigDumper
     */
    protected $configDumper = null;

    /**
     * Cache clearer.
     *
     * @var CacheClearer
     */
    protected $cacheClearer = null;

    /**
     * @var array
     */
    private $multisitesParameters;

    /**
     * Subsites configuration file.
     *
     * @var string
     */
    private $subsitesConfigFile;

    /**
     * List of template parameters.
     *
     * @var array
     */
    private $templateParameters = [];

    /**
     * Constructor.
     * Initialises member vars.
     *
     * @param TranslatorInterface  $translator           Translator service instance
     * @param RequestStack         $requestStack         RequestStack service instance
     * @param SessionInterface     $session              Session service instance
     * @param DynamicConfigDumper  $configDumper         DynamicConfigDumper service instance
     * @param CacheClearer         $cacheClearer         CacheClearer service instance
     * @param array                $multisitesParameters Multisites parameters array
     */
    public function __construct(
        TranslatorInterface $translator,
        RequestStack $requestStack,
        SessionInterface $session,
        DynamicConfigDumper $configDumper,
        CacheClearer $cacheClearer,
        array $multisitesParameters
    ) {
        $this->setTranslator($translator);
        $this->request = $requestStack->getCurrentRequest();
        $this->session = $session;
        $this->configDumper = $configDumper;
        $this->cacheClearer = $cacheClearer;
        $this->multisitesParameters = $multisitesParameters;

        $this->subsitesConfigFile = 'var/multisites.json';
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * Checks whether Multisites configuration is existing and well-formed.
     *
     * @return boolean indicating if everything is okay
     */
    public function verify()
    {
        $this->templateParameters = [];

        if (!$this->isMultisitesEnabled()) {
            $postData = $this->request->request;

            // define multisites system parameters
            $paramsValid = false;
            $mainSiteUrl = $postData->get('mainSiteUrl', null);
            $siteMode = $postData->get('siteMode', null);
            if (null !== $mainSiteUrl && null !== $siteMode && in_array($siteMode, ['domain', 'folder'])) {
                // values are sent via POST, try to save them
                if ($this->writeSystemParametersToConfig($mainSiteUrl, $siteMode)) {
                    $paramsValid = true;
                }
            }

            if (true !== $paramsValid) {
                // ask for multisites system parameters

                $this->templateParameters = [
                    'mainSiteUrl' => $this->request->server->get('HTTP_HOST'),
                    'siteMode' => 'domain'
                ];

                return false;
            }

            $this->session->getFlashBag()->add(
                'error',
                $this->__(
                    'Error: it seems everything is configured correctly, but Multisites is not running. Please check your configuration file!'
                )
            );

            return false;
        }

        // Multisites is enabled

        return true;
    }

    /**
     * Returns the collected template parameters.
     *
     * @return array List of template parameters
     */
    public function getTemplateParameters()
    {
        return $this->templateParameters;
    }

    /**
     * Checks whether the Multisites system is enabled or not.
     *
     * @return boolean True if Multisites is active, false otherwise
     */
    private function isMultisitesEnabled()
    {
        return true == $this->multisitesParameters['enabled'];
    }

    /**
     * Writes multisites system parameters into the app/config/dynamic/generated.yml file.
     *
     * @param string $mainSiteUrl Domain for the main site
     * @param string $siteMode    Which mode to use (domain or folder)
     *
     * @return boolean True if everything worked, false otherwise
     */
    private function writeSystemParametersToConfig($mainSiteUrl, $siteMode)
    {
        // write parameters into app/config/dynamic/generated.yml
        $parameters = $this->configDumper->getParameters();
        $parameters['multisites']['enabled'] = true;
        $parameters['multisites']['mainsiteurl'] = $mainSiteUrl;
        $parameters['multisites']['based_on_domains'] = ($siteMode == 'domain' ? 1 : 0);
        $parameters['multisites']['protected.systemvars'] = [];
        $this->configDumper->setParameters($parameters);
        $this->cacheClearer->clear('symfony');

        return true;
    }
}
