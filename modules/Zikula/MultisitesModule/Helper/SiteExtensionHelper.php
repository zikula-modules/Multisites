<?php

/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 * @see https://modulestudio.de
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Helper;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Twig_Environment;
use Zikula\Bundle\CoreBundle\HttpKernel\ZikulaHttpKernelInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Constant as ExtensionsConstant;
use Zikula\MultisitesModule\DatabaseInfo;
use Zikula\MultisitesModule\Entity\Factory\EntityFactory;
use Zikula\MultisitesModule\Entity\SiteEntity;

/**
 * Utility class for collecting and persisting site extensions (modules, themes, system plugins, module plugins).
 */
class SiteExtensionHelper
{
    use TranslatorTrait;

    /**
     * @var ZikulaHttpKernelInterface
     */
    protected $kernel;

    /**
     * The current request.
     *
     * @var Request
     */
    protected $request = null;

    /**
     * @var SessionInterface
     */
    protected $session;

    /**
     * The twig environment.
     *
     * @var Twig_Environment
     */
    protected $twig = null;

    /**
     * The entity factory.
     *
     * @var EntityFactory
     */
    protected $entityFactory = null;

    /**
     * The workflow helper.
     *
     * @var WorkflowHelper
     */
    protected $workflowHelper = null;

    /**
     * The system helper.
     *
     * @var SystemHelper
     */
    protected $systemHelper = null;

    /**
     * Constructor.
     * Initialises member vars.
     *
     * @param TranslatorInterface       $translator     Translator service instance
     * @param ZikulaHttpKernelInterface $kernel         Kernel service instance
     * @param RequestStack              $requestStack   RequestStack service instance
     * @param SessionInterface          $session        Session service instance
     * @param Twig_Environment          $twig           Twig service instance
     * @param EntityFactory             $entityFactory  EntityFactory service instance
     * @param WorkflowHelper            $workflowHelper WorkflowHelper service instance
     * @param SystemHelper              $systemHelper   SystemHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        ZikulaHttpKernelInterface $kernel,
        RequestStack $requestStack,
        SessionInterface $session,
        Twig_Environment $twig,
        EntityFactory $entityFactory,
        WorkflowHelper $workflowHelper,
        SystemHelper $systemHelper
    ) {
        $this->setTranslator($translator);
        $this->kernel = $kernel;
        $this->request = $requestStack->getCurrentRequest();
        $this->session = $session;
        $this->twig = $twig;
        $this->entityFactory = $entityFactory;
        $this->workflowHelper = $workflowHelper;
        $this->systemHelper = $systemHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * Renders the icons that identify the modules availability for a site.
     *
     * @param SiteEntity $site The given site instance
     * @param array      $args Additional arguments
     *
     * @return string The rendered output
     */
    public function getActionIconsForSiteModule(SiteEntity $site, $args)
    {
        $name = isset($args['name'])
            ? $args['name']
            : $this->request->request->get('name', null)
        ;
        $available = isset($args['available'])
            ? $args['available']
            : $this->request->request->get('available', null)
        ;
        $siteModules = isset($args['siteModules'])
            ? $args['siteModules']
            : $this->request->request->get('siteModules', null)
        ;

        $templateParameters = [
            'site' => $site,
            'name' => $name,
            'available' => $available,
            'siteModules' => $siteModules
        ];

        return $this->twig->render('@ZikulaMultisitesModule/Site/iconsModule.html.twig', $templateParameters);
    }

    /**
     * Renders the icons that identify the themes availability for a site.
     *
     * @param SiteEntity $site The given site instance
     * @param array      $args Additional arguments
     *
     * @return string The rendered output
     */
    public function getActionIconsForSiteTheme(SiteEntity $site, $args)
    {
        $name = isset($args['name'])
            ? $args['name']
            : $this->request->request->get('name', null)
        ;
        $available = isset($args['available'])
            ? $args['available']
            : $this->request->request->get('available', null)
        ;
        $siteThemes = isset($args['siteThemes'])
            ? $args['siteThemes']
            : $this->request->request->get('siteThemes', null)
        ;
        $isDefaultTheme = isset($args['isDefaultTheme'])
            ? $args['isDefaultTheme']
            : $this->request->request->get('isDefaultTheme', null)
        ;

        $templateParameters = [
            'site' => $site,
            'name' => $name,
            'available' => $available,
            'isDefaultTheme' => $isDefaultTheme,
            'siteThemes', $siteThemes
        ];

        return $this->twig->render('@ZikulaMultisitesModule/Site/iconsTheme.html.twig', $templateParameters);
    }

    /**
     * Retrieves all modules available for a given site.
     *
     * @param SiteEntity $site The given site instance
     *
     * @return array|boolean An array with a list of the found modules or false on errors
     */
    public function getAllModulesFromSiteDb(SiteEntity $site)
    {
        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $this->session->getFlashBag()->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $items = [];
        $sql = 'SELECT `name`, `state`, `version` FROM `modules`';

        while ($row = $connect->fetchAssoc($sql)) {
            $items[$row['name']] = $row;
        }

        return $items;
    }

    /**
     * Returns information for a given site module.
     *
     * @param SiteEntity $site       The given site instance
     * @param string     $moduleName Name of module to select
     *
     * @return array|boolean An array with the required module information or false on errors
     */
    public function getModuleFromSiteDb(SiteEntity $site, $moduleName)
    {
        $flashBag = $this->session->getFlashBag();

        if (null === $moduleName || $moduleName == '') {
            $flashBag->add(
                'error',
                $this->__('Error! Could not do what you wanted. Please check your input.')
            );

            return false;
        }

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $sql = '
            SELECT `name`, `state` FROM `modules`
            WHERE `name` = :moduleName
        ';

        return $connect->fetchAssoc($sql, [':moduleName' => $moduleName]);
    }

    /**
     * Creates a module in a site database.
     *
     * @param SiteEntity $site       The given site instance
     * @param string     $moduleName Name of module to create
     *
     * @return boolean True on success or false otherwise
     */
    public function createSiteModule(SiteEntity $site, $moduleName)
    {
        $flashBag = $this->session->getFlashBag();

        if (null === $moduleName || $moduleName == '') {
            $flashBag->add(
                'error',
                $this->__('Error! Could not do what you wanted. Please check your input.')
            );

            return false;
        }

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $allModules = $this->kernel->getModules();
        $module = $allModules[$moduleName];

        $fields = [];

        $exclude = [
            'oldnames',
            'dependencies'
        ];

        foreach ($module as $key => $value) {
            if (in_array($key, $exclude)) {
                continue;
            }
            $fields[$key] = $value;
        }
        // set module state to 1
        $fields['state'] = '1';

        // create the module in the site
        $connect->insert('modules', $fields);

        return true;
    }

    /**
     * Deletes a module from a site database.
     *
     * @param SiteEntity $site       The given site instance
     * @param string     $moduleName Name of module to delete
     *
     * @return boolean True on success or false otherwise
     */
    public function deleteSiteModule(SiteEntity $site, $moduleName)
    {
        $flashBag = $this->session->getFlashBag();

        if (null === $moduleName || $moduleName == '') {
            $flashBag->add(
                'error',
                $this->__('Error! Could not do what you wanted. Please check your input.')
            );

            return false;
        }

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        // get module information
        $siteModule = $this->getModuleFromSiteDb($site, $moduleName);

        if ($siteModule['state'] == ExtensionsConstant::STATE_ACTIVE) {
            $this->modifyModuleActivation($site, [
                'moduleName' => $moduleName,
                'newState' => ExtensionsConstant::STATE_INACTIVE
            ]);

            return true;
        }

        if ($siteModule['state'] == ExtensionsConstant::STATE_INACTIVE) {
            return true;
        }

        $connect->delete('modules', ['name' => $moduleName]);

        return true;
    }

    /**
     * Modifies the state of a module in a site database.
     *
     * @param SiteEntity $site       The given site instance
     * @param string     $moduleName Module name
     * @param integer    $newState   New state
     *
     * @return boolean True on success or false otherwise
     */
    public function modifyModuleActivation(SiteEntity $site, $moduleName = '', $newState = 0)
    {
        $flashBag = $this->session->getFlashBag();

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        // update the module state
        $connect->update('modules', ['state' => $newState], ['name' => $moduleName]);

        return true;
    }

    /**
     * Retrieves all themes available for a given site.
     *
     * @param SiteEntity $site The given site instance
     *
     * @return array|boolean List of found themes or false on errors
     */
    public function getAllThemesFromSiteDb(SiteEntity $site)
    {
        $flashBag = $this->session->getFlashBag();

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $items = [];
        $sql = 'SELECT `name`, `state` FROM `themes`';

        while ($row = $connect->fetchAssoc($sql)) {
            $items[$row['name']] = $row;
        }

        return $items;
    }

    /**
     * Returns information for a given site theme.
     *
     * @param SiteEntity $site      The given site instance
     * @param string     $themeName Name of theme to select
     *
     * @return array|boolean An array with the required theme information or false on errors
     */
    public function getThemeFromSiteDb(SiteEntity $site, $themeName)
    {
        $flashBag = $this->session->getFlashBag();

        if (null === $themeName || $themeName == '') {
            $flashBag->add(
                'error',
                $this->__('Error! Could not do what you wanted. Please check your input.')
            );

            return false;
        }

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $sql = '
            SELECT `name`, `state`
            FROM `themes`
            WHERE `name` = :themeName
        ';

        return $connect->fetchAssoc($sql, [':themeName' => $themeName]);
    }

    /**
     * Creates a theme in a site database.
     *
     * @param SiteEntity $site      The given site instance
     * @param string     $themeName Name of theme to create
     *
     * @return boolean True on success or false otherwise
     */
    public function createSiteTheme(SiteEntity $site, $themeName)
    {
        $flashBag = $this->session->getFlashBag();

        if (null === $themeName || $themeName == '') {
            $flashBag->add(
                'error',
                $this->__('Error! Could not do what you wanted. Please check your input.')
            );

            return false;
        }

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $allThemes = $this->getAllThemesInSystem();
        $theme = $allThemes[$themeName];

        $fields = [];

        $exclude = [
            'official',
            'author',
            'credits',
            'help',
            'changelog',
            'license'
        ];

        foreach ($theme as $key => $value) {
            if (in_array($key, $exclude)) {
                continue;
            }
            $fields[$key] = $value;
        }

        // create the theme in the site
        $connect->insert('themes', $fields);

        return true;
    }

    /**
     * Deletes a theme from a site database.
     *
     * @param SiteEntity $site      The given site instance
     * @param string     $themeName Name of theme to delete
     *
     * @return boolean True on success or false otherwise
     */
    public function deleteSiteTheme(SiteEntity $site, $themeName)
    {
        $flashBag = $this->session->getFlashBag();

        if (null === $themeName || $themeName == '') {
            $flashBag->add(
                'error',
                $this->__('Error! Could not do what you wanted. Please check your input.')
            );

            return false;
        }

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $connect->delete('themes', ['name' => $themeName]);

        return true;
    }

    /**
     * Gets the default theme for a site.
     *
     * @param SiteEntity $site The given site instance
     *
     * @return string Name of site default theme
     */
    public function getSiteDefaultTheme(SiteEntity $site)
    {
        $flashBag = $this->session->getFlashBag();

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $sql = '
            SELECT `value`
            FROM `module_vars`
            WHERE `modname` = \'ZConfig\'
            AND `name` = \'Default_Theme\'
        ';
        $row = $connect->fetchAssoc($sql);

        return unserialize($row['value']);
    }

    /**
     * Update the site default theme
     *
     * @param SiteEntity $site      The given site instance
     * @param string     $themeName Name of new default theme
     *
     * @return boolean True on success or false otherwise
     */
    public function setAsDefaultTheme(SiteEntity $site, $themeName)
    {
        $flashBag = $this->session->getFlashBag();

        $connect = $this->systemHelper->connectToExternalDatabase(new DatabaseInfo($site));
        if (!$connect) {
            $flashBag->add(
                'error',
                $this->__f(
                    'Error! Connecting to the database %s failed.',
                    ['%s' => $site->getDatabaseName()]
                )
            );

            return false;
        }

        $connect->update(
            'module_vars',
            ['value' => serialize($themeName)],
            ['modname' => 'ZConfig', 'name' => 'Default_Theme']
        );

        return true;
    }
}
