<?php

/**
 * Multisites.
 *
 * @copyright Albert Pérez Monfort (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Albert Pérez Monfort <aperezm@xtec.cat>.
 *
 * @see https://modulestudio.de
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

namespace Zikula\MultisitesModule\Menu\Base;

use Knp\Menu\FactoryInterface;
use Knp\Menu\ItemInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use Zikula\UsersModule\Constant as UsersConstant;
use Zikula\MultisitesModule\Entity\SiteEntity;
use Zikula\MultisitesModule\Entity\TemplateEntity;
use Zikula\MultisitesModule\Entity\ProjectEntity;
use Zikula\MultisitesModule\MultisitesEvents;
use Zikula\MultisitesModule\Event\ConfigureItemActionsMenuEvent;
use Zikula\MultisitesModule\Event\ConfigureViewActionsMenuEvent;
use Zikula\MultisitesModule\Helper\ModelHelper;
use Zikula\MultisitesModule\Helper\PermissionHelper;

/**
 * Menu builder base class.
 */
class AbstractMenuBuilder
{
    use TranslatorTrait;
    
    /**
     * @var FactoryInterface
     */
    protected $factory;
    
    /**
     * @var EventDispatcherInterface
     */
    protected $eventDispatcher;
    
    /**
     * @var RequestStack
     */
    protected $requestStack;
    
    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;
    
    /**
     * @var CurrentUserApiInterface
     */
    protected $currentUserApi;
    
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var ModelHelper
     */
    protected $modelHelper;
    
    public function __construct(
        TranslatorInterface $translator,
        FactoryInterface $factory,
        EventDispatcherInterface $eventDispatcher,
        RequestStack $requestStack,
        PermissionHelper $permissionHelper,
        CurrentUserApiInterface $currentUserApi,
        VariableApiInterface $variableApi,
        ModelHelper $modelHelper
    ) {
        $this->setTranslator($translator);
        $this->factory = $factory;
        $this->eventDispatcher = $eventDispatcher;
        $this->requestStack = $requestStack;
        $this->permissionHelper = $permissionHelper;
        $this->currentUserApi = $currentUserApi;
        $this->variableApi = $variableApi;
        $this->modelHelper = $modelHelper;
    }
    
    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }
    
    /**
     * Builds the item actions menu.
     *
     * @param array $options List of additional options
     *
     * @return ItemInterface The assembled menu
     */
    public function createItemActionsMenu(array $options = [])
    {
        $menu = $this->factory->createItem('itemActions');
        if (!isset($options['entity'], $options['area'], $options['context'])) {
            return $menu;
        }
    
        $entity = $options['entity'];
        $routeArea = $options['area'];
        $context = $options['context'];
        $menu->setChildrenAttribute('class', 'list-inline item-actions');
    
        $this->eventDispatcher->dispatch(
            MultisitesEvents::MENU_ITEMACTIONS_PRE_CONFIGURE,
            new ConfigureItemActionsMenuEvent($this->factory, $menu, $options)
        );
    
        $currentUserId = $this->currentUserApi->isLoggedIn()
            ? $this->currentUserApi->get('uid')
            : UsersConstant::USER_ID_ANONYMOUS
        ;
        if ($entity instanceof SiteEntity) {
            $routePrefix = 'zikulamultisitesmodule_site_';
            $isOwner = 0 < $currentUserId
                && null !== $entity->getCreatedBy()
                && $currentUserId === $entity->getCreatedBy()->getUid()
            ;
            
            if ($this->permissionHelper->mayEdit($entity)) {
                $menu->addChild($this->__('Edit', 'zikulamultisitesmodule'), [
                    'route' => $routePrefix . $routeArea . 'edit',
                    'routeParameters' => $entity->createUrlArgs(),
                ])
                    ->setLinkAttribute(
                        'title',
                        $this->__('Edit this site', 'zikulamultisitesmodule')
                    )
                    ->setAttribute('icon', 'fa fa-pencil-square-o')
                ;
                $menu->addChild($this->__('Reuse', 'zikulamultisitesmodule'), [
                    'route' => $routePrefix . $routeArea . 'edit',
                    'routeParameters' => ['astemplate' => $entity->getKey()],
                ])
                    ->setLinkAttribute(
                        'title',
                        $this->__('Reuse for new site', 'zikulamultisitesmodule')
                    )
                    ->setAttribute('icon', 'fa fa-files-o')
                ;
            }
            if ($this->permissionHelper->mayDelete($entity)) {
                $menu->addChild($this->__('Delete', 'zikulamultisitesmodule'), [
                    'route' => $routePrefix . $routeArea . 'delete',
                    'routeParameters' => $entity->createUrlArgs(),
                ])
                    ->setLinkAttribute(
                        'title',
                        $this->__('Delete this site', 'zikulamultisitesmodule')
                    )
                    ->setAttribute('icon', 'fa fa-trash-o')
                ;
            }
        }
        if ($entity instanceof TemplateEntity) {
            $routePrefix = 'zikulamultisitesmodule_template_';
            $isOwner = 0 < $currentUserId
                && null !== $entity->getCreatedBy()
                && $currentUserId === $entity->getCreatedBy()->getUid()
            ;
            
            if ($this->permissionHelper->mayEdit($entity)) {
                $menu->addChild($this->__('Edit', 'zikulamultisitesmodule'), [
                    'route' => $routePrefix . $routeArea . 'edit',
                    'routeParameters' => $entity->createUrlArgs(),
                ])
                    ->setLinkAttribute(
                        'title',
                        $this->__('Edit this template', 'zikulamultisitesmodule')
                    )
                    ->setAttribute('icon', 'fa fa-pencil-square-o')
                ;
                $menu->addChild($this->__('Reuse', 'zikulamultisitesmodule'), [
                    'route' => $routePrefix . $routeArea . 'edit',
                    'routeParameters' => ['astemplate' => $entity->getKey()],
                ])
                    ->setLinkAttribute(
                        'title',
                        $this->__('Reuse for new template', 'zikulamultisitesmodule')
                    )
                    ->setAttribute('icon', 'fa fa-files-o')
                ;
            }
            
            // more actions for adding new related items
            
            if ($isOwner || $this->permissionHelper->hasComponentPermission('site', ACCESS_EDIT)) {
                $menu->addChild($this->__('Create sites', 'zikulamultisitesmodule'), [
                    'route' => 'zikulamultisitesmodule_site_' . $routeArea . 'edit',
                    'routeParameters' => ['template' => $entity->getKey()],
                ])
                    ->setAttribute('icon', 'fa fa-plus')
                ;
            }
            
            if ($isOwner || $this->permissionHelper->hasComponentPermission('project', ACCESS_EDIT)) {
                $menu->addChild($this->__('Create projects', 'zikulamultisitesmodule'), [
                    'route' => 'zikulamultisitesmodule_project_' . $routeArea . 'edit',
                    'routeParameters' => ['templates' => $entity->getKey()],
                ])
                    ->setAttribute('icon', 'fa fa-plus')
                ;
            }
        }
        if ($entity instanceof ProjectEntity) {
            $routePrefix = 'zikulamultisitesmodule_project_';
            $isOwner = 0 < $currentUserId
                && null !== $entity->getCreatedBy()
                && $currentUserId === $entity->getCreatedBy()->getUid()
            ;
            
            if ($this->permissionHelper->mayEdit($entity)) {
                $menu->addChild($this->__('Edit', 'zikulamultisitesmodule'), [
                    'route' => $routePrefix . $routeArea . 'edit',
                    'routeParameters' => $entity->createUrlArgs(),
                ])
                    ->setLinkAttribute(
                        'title',
                        $this->__('Edit this project', 'zikulamultisitesmodule')
                    )
                    ->setAttribute('icon', 'fa fa-pencil-square-o')
                ;
                $menu->addChild($this->__('Reuse', 'zikulamultisitesmodule'), [
                    'route' => $routePrefix . $routeArea . 'edit',
                    'routeParameters' => ['astemplate' => $entity->getKey()],
                ])
                    ->setLinkAttribute(
                        'title',
                        $this->__('Reuse for new project', 'zikulamultisitesmodule')
                    )
                    ->setAttribute('icon', 'fa fa-files-o')
                ;
            }
            
            // more actions for adding new related items
            
            if ($isOwner || $this->permissionHelper->hasComponentPermission('site', ACCESS_EDIT)) {
                $menu->addChild($this->__('Create sites', 'zikulamultisitesmodule'), [
                    'route' => 'zikulamultisitesmodule_site_' . $routeArea . 'edit',
                    'routeParameters' => ['project' => $entity->getKey()],
                ])
                    ->setAttribute('icon', 'fa fa-plus')
                ;
            }
            
            if ($isOwner || $this->permissionHelper->hasComponentPermission('template', ACCESS_EDIT)) {
                $menu->addChild($this->__('Create templates', 'zikulamultisitesmodule'), [
                    'route' => 'zikulamultisitesmodule_template_' . $routeArea . 'edit',
                    'routeParameters' => ['projects' => $entity->getKey()],
                ])
                    ->setAttribute('icon', 'fa fa-plus')
                ;
            }
        }
    
        $this->eventDispatcher->dispatch(
            MultisitesEvents::MENU_ITEMACTIONS_POST_CONFIGURE,
            new ConfigureItemActionsMenuEvent($this->factory, $menu, $options)
        );
    
        return $menu;
    }
    
    /**
     * Builds the view actions menu.
     *
     * @param array $options List of additional options
     *
     * @return ItemInterface The assembled menu
     */
    public function createViewActionsMenu(array $options = [])
    {
        $menu = $this->factory->createItem('viewActions');
        if (!isset($options['objectType'], $options['area'])) {
            return $menu;
        }
    
        $objectType = $options['objectType'];
        $routeArea = $options['area'];
        $menu->setChildrenAttribute('class', 'list-inline view-actions');
    
        $this->eventDispatcher->dispatch(
            MultisitesEvents::MENU_VIEWACTIONS_PRE_CONFIGURE,
            new ConfigureViewActionsMenuEvent($this->factory, $menu, $options)
        );
    
        $query = $this->requestStack->getMasterRequest()->query;
        $currentTemplate = $query->getAlnum('tpl', '');
        if ('site' === $objectType) {
            $routePrefix = 'zikulamultisitesmodule_site_';
            if (!in_array($currentTemplate, [])) {
                $canBeCreated = $this->modelHelper->canBeCreated($objectType);
                if ($canBeCreated) {
                    if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_EDIT)) {
                        $menu->addChild($this->__('Create site', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'edit',
                        ])
                            ->setAttribute('icon', 'fa fa-plus')
                        ;
                    }
                }
                $routeParameters = $query->all();
                if (1 === $query->getInt('own')) {
                    $routeParameters['own'] = 1;
                } else {
                    unset($routeParameters['own']);
                }
                if (1 === $query->getInt('all')) {
                    unset($routeParameters['all']);
                    $menu->addChild($this->__('Back to paginated view', 'zikulamultisitesmodule'), [
                        'route' => $routePrefix . $routeArea . 'view',
                        'routeParameters' => $routeParameters,
                    ])
                        ->setAttribute('icon', 'fa fa-table')
                    ;
                } else {
                    $routeParameters['all'] = 1;
                    $menu->addChild($this->__('Show all entries', 'zikulamultisitesmodule'), [
                        'route' => $routePrefix . $routeArea . 'view',
                        'routeParameters' => $routeParameters,
                    ])
                        ->setAttribute('icon', 'fa fa-table')
                    ;
                }
                if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_EDIT)) {
                    $routeParameters = $query->all();
                    if (1 === $query->getInt('own')) {
                        unset($routeParameters['own']);
                        $menu->addChild($this->__('Show also entries from other users', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'view',
                            'routeParameters' => $routeParameters,
                        ])
                            ->setAttribute('icon', 'fa fa-users')
                        ;
                    } else {
                        $routeParameters['own'] = 1;
                        $menu->addChild($this->__('Show only own entries', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'view',
                            'routeParameters' => $routeParameters,
                        ])
                            ->setAttribute('icon', 'fa fa-user')
                        ;
                    }
                }
            }
        }
        if ('template' === $objectType) {
            $routePrefix = 'zikulamultisitesmodule_template_';
            if (!in_array($currentTemplate, [])) {
                $canBeCreated = $this->modelHelper->canBeCreated($objectType);
                if ($canBeCreated) {
                    if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_EDIT)) {
                        $menu->addChild($this->__('Create template', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'edit',
                        ])
                            ->setAttribute('icon', 'fa fa-plus')
                        ;
                    }
                }
                $routeParameters = $query->all();
                if (1 === $query->getInt('own')) {
                    $routeParameters['own'] = 1;
                } else {
                    unset($routeParameters['own']);
                }
                if (1 === $query->getInt('all')) {
                    unset($routeParameters['all']);
                    $menu->addChild($this->__('Back to paginated view', 'zikulamultisitesmodule'), [
                        'route' => $routePrefix . $routeArea . 'view',
                        'routeParameters' => $routeParameters,
                    ])
                        ->setAttribute('icon', 'fa fa-table')
                    ;
                } else {
                    $routeParameters['all'] = 1;
                    $menu->addChild($this->__('Show all entries', 'zikulamultisitesmodule'), [
                        'route' => $routePrefix . $routeArea . 'view',
                        'routeParameters' => $routeParameters,
                    ])
                        ->setAttribute('icon', 'fa fa-table')
                    ;
                }
                if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_EDIT)) {
                    $routeParameters = $query->all();
                    if (1 === $query->getInt('own')) {
                        unset($routeParameters['own']);
                        $menu->addChild($this->__('Show also entries from other users', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'view',
                            'routeParameters' => $routeParameters,
                        ])
                            ->setAttribute('icon', 'fa fa-users')
                        ;
                    } else {
                        $routeParameters['own'] = 1;
                        $menu->addChild($this->__('Show only own entries', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'view',
                            'routeParameters' => $routeParameters,
                        ])
                            ->setAttribute('icon', 'fa fa-user')
                        ;
                    }
                }
            }
        }
        if ('project' === $objectType) {
            $routePrefix = 'zikulamultisitesmodule_project_';
            if (!in_array($currentTemplate, [])) {
                $canBeCreated = $this->modelHelper->canBeCreated($objectType);
                if ($canBeCreated) {
                    if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_EDIT)) {
                        $menu->addChild($this->__('Create project', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'edit',
                        ])
                            ->setAttribute('icon', 'fa fa-plus')
                        ;
                    }
                }
                $routeParameters = $query->all();
                if (1 === $query->getInt('own')) {
                    $routeParameters['own'] = 1;
                } else {
                    unset($routeParameters['own']);
                }
                if (1 === $query->getInt('all')) {
                    unset($routeParameters['all']);
                    $menu->addChild($this->__('Back to paginated view', 'zikulamultisitesmodule'), [
                        'route' => $routePrefix . $routeArea . 'view',
                        'routeParameters' => $routeParameters,
                    ])
                        ->setAttribute('icon', 'fa fa-table')
                    ;
                } else {
                    $routeParameters['all'] = 1;
                    $menu->addChild($this->__('Show all entries', 'zikulamultisitesmodule'), [
                        'route' => $routePrefix . $routeArea . 'view',
                        'routeParameters' => $routeParameters,
                    ])
                        ->setAttribute('icon', 'fa fa-table')
                    ;
                }
                if ($this->permissionHelper->hasComponentPermission($objectType, ACCESS_EDIT)) {
                    $routeParameters = $query->all();
                    if (1 === $query->getInt('own')) {
                        unset($routeParameters['own']);
                        $menu->addChild($this->__('Show also entries from other users', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'view',
                            'routeParameters' => $routeParameters,
                        ])
                            ->setAttribute('icon', 'fa fa-users')
                        ;
                    } else {
                        $routeParameters['own'] = 1;
                        $menu->addChild($this->__('Show only own entries', 'zikulamultisitesmodule'), [
                            'route' => $routePrefix . $routeArea . 'view',
                            'routeParameters' => $routeParameters,
                        ])
                            ->setAttribute('icon', 'fa fa-user')
                        ;
                    }
                }
            }
        }
    
        $this->eventDispatcher->dispatch(
            MultisitesEvents::MENU_VIEWACTIONS_POST_CONFIGURE,
            new ConfigureViewActionsMenuEvent($this->factory, $menu, $options)
        );
    
        return $menu;
    }
}
